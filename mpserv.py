
import os
import logging
import asyncio

from flask import Flask, request
from aiogram import Bot, Dispatcher, types

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}/webhook"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

app = Flask(__name__)

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!")

@app.route("/webhook", methods=["POST"])
def webhook():
    json_data = request.get_json(force=True)
    print("üì© –ü—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç:", json_data)
    update = types.Update(**json_data)
    try:
        asyncio.run(dp.process_update(update))  # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: %s", e)
    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    asyncio.run(bot.set_webhook(WEBHOOK_URL))
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

    app.run(host="0.0.0.0", port=port)
