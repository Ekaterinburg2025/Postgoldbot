import os
import json
import sqlite3
import logging
from datetime import datetime, timedelta
import pytz
import telebot
from telebot import types
from flask import Flask, request

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="bot.log"
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω ID (–≤–∞—à ID)
ADMIN_CHAT_ID = 479938867  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
paid_users = {}
user_posts = {}
user_daily_posts = {}
user_statistics = {}
admins = [ADMIN_CHAT_ID]

# –°–ø–∏—Å–∫–∏ chat_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥–∞
chat_ids_mk = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002210043742,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002238514762,
    "–ü–µ—Ä–º—å": -1002205127231,
    "–ò–∂–µ–≤—Å–∫": -1001604781452,
    "–ö–∞–∑–∞–Ω—å": -1002228881675,
    "–û—Ä–µ–Ω–±—É—Ä–≥": -1002255568202,
    "–£—Ñ–∞": -1002196469365,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002235645677,
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": -1002248474008,
    "–ë–∞—Ä–Ω–∞—É–ª": -1002234471215,
    "–û–º—Å–∫": -1002151258573,
    "–°–∞—Ä–∞—Ç–æ–≤": -1002426762134,
    "–í–æ—Ä–æ–Ω–µ–∂": -1002207503508,
    "–°–∞–º–∞—Ä–∞": -1001852671383,
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": -1002167762598,
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": -1001631628911,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": -1002217056197,
    "–ò—Ä–∫—É—Ç—Å–∫": -1002210419274,
    "–ö–µ–º–µ—Ä–æ–≤–æ": -1002147522863,
    "–ú–æ—Å–∫–≤–∞": -1002208434096,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": -1002485776859,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –Æ–≥–∞": -1001814693664,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞": -1002161346845,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä": -1002210623988,
    "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ Ô∏è": -1002426733876
}

chat_ids_parni = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002413948841,
    "–¢—é–º–µ–Ω—å": -1002255622479,
    "–û–º—Å–∫": -1002274367832,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002406302365,
    "–ü–µ—Ä–º—å": -1002280860973,
    "–ö—É—Ä–≥–∞–Ω": -1002469285352,
    "–•–ú–ê–û": -1002287709568,
    "–£—Ñ–∞": -1002448909000,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002261777025,
    "–Ø–ú–ê–û": -1002371438340
}

chat_ids_ns = {
    "–ö—É—Ä–≥–∞–Ω": -1001465465654,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1001824149334,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002233108474,
    "–ü–µ—Ä–º—å": -1001753881279,
    "–£—Ñ–∞": -1001823390636,
    "–Ø–º–∞–ª": -1002145851794,
    "–ú–æ—Å–∫–≤–∞": -1001938448310,
    "–•–ú–ê–û": -1001442597049,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66": -1002169473861,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74": -1002193127380
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ –ù–°
ns_city_substitution = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
paid_users = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É—á—ë—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å—É—Ç–∫–∏
user_daily_posts = {}

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
network_signatures = {
    "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±": "Ô∏è üï∏Ô∏è–†–µ–∫–ª–∞–º–∞. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –ú–ö.üï∏Ô∏è",
    "–ü–ê–†–ù–ò 18+": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´",
    "–ù–°": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
user_statistics = {}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
admins = [ADMIN_CHAT_ID]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ SQLite
def save_data():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    data = {
        "paid_users": paid_users,
        "user_posts": user_posts,
        "user_daily_posts": user_daily_posts,
        "user_statistics": user_statistics,
        "admins": admins
    }
    cur.execute("INSERT OR REPLACE INTO bot_data (id, data) VALUES (1, ?)", (json.dumps(data),))
    conn.commit()
    cur.close()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
def load_data():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS bot_data (id INTEGER PRIMARY KEY, data TEXT)")
    cur.execute("SELECT data FROM bot_data WHERE id = 1")
    result = cur.fetchone()
    if result:
        data = json.loads(result[0])
        global paid_users, user_posts, user_daily_posts, user_statistics, admins
        paid_users = data.get("paid_users", {})
        user_posts = data.get("user_posts", {})
        user_daily_posts = data.get("user_daily_posts", {})
        user_statistics = data.get("user_statistics", {})
        admins = data.get("admins", [ADMIN_CHAT_ID])
    cur.close()
    conn.close()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

# –í–µ–±—Ö—É–∫ endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    webhook_url = "https://postgoldbot.onrender.com/webhook"  # –í–∞—à URL –Ω–∞ Render
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

# –ó–∞–ø—É—Å–∫ Flask
@app.route('/')
def index():
    return 'Bot is running!'

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=8080)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    run_flask()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_duration_for_payment(message, user_id, network, city):
    if message.text == "–ù–∞–∑–∞–¥":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        markup.add(*cities)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
        return

    duration = message.text
    if duration == "–î–µ–Ω—å":
        days = 1
    elif duration == "–ù–µ–¥–µ–ª—è":
        days = 7
    elif duration == "–ú–µ—Å—è—Ü":
        days = 30
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
        bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))
        return

    expiry_date = datetime.now() + timedelta(days=days)

    if user_id not in paid_users:
        paid_users[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º 'end_date'
    paid_users[user_id].append({
        "end_date": expiry_date.isoformat(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º isoformat –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        "network": network,
        "city": city
    })
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    bot.send_message(message.chat.id, f" ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω–µ–π. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date.strftime('%Y-%m-%d')}.")

def serialize_datetime(obj):
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Type {type(obj)} is not serializable")

def deserialize_datetime(d):
    for key, value in d.items():
        if isinstance(value, str) and key in ['expiry_date', 'last_post_time', 'time']:
            try:
                d[key] = datetime.fromisoformat(value)
            except ValueError:
                pass
    return d

def is_new_day(last_post_time):
    if last_post_time is None:
        return True

    if isinstance(last_post_time, str):
        last_post_time = datetime.fromisoformat(last_post_time)

    current_time = datetime.now()
    return current_time.date() > last_post_time.date()

def get_user_statistics(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    stats = {
        "published": 0,
        "remaining": 3,
        "details": {}
    }

    if user_id in user_daily_posts:
        for network in user_daily_posts[user_id]:
            stats["details"][network] = {}
            for city in user_daily_posts[user_id][network]:
                posts_today = len([
                    post_time for post_time in user_daily_posts[user_id][network][city]["posts"]
                    if is_today(post_time)
                ])
                stats["details"][network][city] = {
                    "published": posts_today,
                    "remaining": max(0, 3 - posts_today)
                }
                stats["published"] += posts_today

        # –û–±—â–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ "–í—Å–µ —Å–µ—Ç–∏"
        if "–í—Å–µ —Å–µ—Ç–∏" in stats["details"]:
            total_published = sum(
                details["published"]
                for network in stats["details"]
                for city in stats["details"][network]
            )
            stats["remaining"] = max(0, 9 - total_published)
        else:
            stats["remaining"] = max(0, 3 - stats["published"])

    return stats

def is_today(timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é."""
    if isinstance(timestamp, str):
        timestamp = datetime.fromisoformat(timestamp)
    return timestamp.date() == datetime.now().date()

def check_payment(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É."""
    if str(user_id) not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    for payment in paid_users[str(user_id)]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã
        if payment["expiry_date"] < datetime.now():
            print(f"[DEBUG] –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏

        # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ç—è–º –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        if payment["network"] == "–í—Å–µ —Å–µ—Ç–∏" and payment["city"] == city:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ç—è–º –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            return True

        # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É
        if payment["network"] == network and payment["city"] == city:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ {network} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            return True

    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ {network} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    return False

def validate_text_length(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤."""
    return len(text) <= 1000

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
    data = {
        "paid_users": {
            user_id: [
                {
                    "end_date": entry["end_date"],  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'end_date' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    "network": entry["network"],    # –ö–ª—é—á 'network'
                    "city": entry["city"]           # –ö–ª—é—á 'city'
                }
                for entry in entries
            ]
            for user_id, entries in paid_users.items()
        },
        "user_posts": user_posts,
        "user_daily_posts": user_daily_posts,
        "user_statistics": user_statistics,
        "admins": admins
    }
    cur.execute(
        "INSERT OR REPLACE INTO bot_data (id, data) VALUES (1, ?)",
        (json.dumps(data, default=str),)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º default=str –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ datetime
    )
    conn.commit()
    cur.close()
    conn.close()

def load_data():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS bot_data (id INTEGER PRIMARY KEY, data TEXT)")
    cur.execute("SELECT data FROM bot_data WHERE id = 1")
    result = cur.fetchone()
    if result:
        data = json.loads(result[0])
        global paid_users, user_posts, user_daily_posts, user_statistics, admins
        paid_users = {
            user_id: [
                {
                    "end_date": datetime.fromisoformat(entry["end_date"]) if isinstance(entry["end_date"], str) else entry["end_date"],
                    "network": entry["network"],
                    "city": entry["city"]
                }
                for entry in entries
            ]
            for user_id, entries in data.get("paid_users", {}).items()
        }
        user_posts = data.get("user_posts", {})
        user_daily_posts = data.get("user_daily_posts", {})
        user_statistics = data.get("user_statistics", {})
        admins = data.get("admins", [ADMIN_CHAT_ID])
        print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    cur.close()
    conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def get_network_markup():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏", "–ù–∞–∑–∞–¥")
    return markup

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    return markup

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
def format_time(timestamp):
    tz = pytz.timezone('Asia/Yekaterinburg')
    local_time = timestamp.astimezone(tz)
    return local_time.strftime("%H:%M, %d %B %Y")

def is_new_day(last_post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å."""
    if last_post_time is None:
        return True  # –ï—Å–ª–∏ last_post_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    current_time = datetime.now()
    return current_time.date() > last_post_time.date()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_name(user):
    name = user.first_name
    if user.username:
        return f"@{user.username}"
    else:
        return f"{name} (ID: {user.id})"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in admins

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    try:
        if message.chat.type != "private":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        if message.chat.id not in user_posts:
            user_posts[message.chat.id] = []

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø PostGoldBot. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (3 –≤ —Å—É—Ç–∫–∏)
def check_daily_limit(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_daily_posts:
        user_daily_posts[user_id] = {}

    if network not in user_daily_posts[user_id]:
        user_daily_posts[user_id][network] = {}

    if city not in user_daily_posts[user_id][network]:
        user_daily_posts[user_id][network][city] = {"posts": [], "last_post_time": None}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if is_new_day(user_daily_posts[user_id][network][city]["last_post_time"]):
        user_daily_posts[user_id][network][city]["posts"] = []
        print(f"[DEBUG] –ù–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    if network == "–í—Å–µ —Å–µ—Ç–∏":
        # –û–±—â–∏–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π (9 –ø—É–±–ª–∏–∫–∞—Ü–∏–π)
        total_posts = 0
        for net in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"]:
            if net in user_daily_posts[user_id] and city in user_daily_posts[user_id][net]:
                total_posts += len(user_daily_posts[user_id][net][city]["posts"])
        return total_posts < 9
    else:
        # –õ–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ (3 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        return len(user_daily_posts[user_id][network][city]["posts"]) < 3

def update_daily_posts(user_id, network, city, remove=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_daily_posts:
        user_daily_posts[user_id] = {}

    if network not in user_daily_posts[user_id]:
        user_daily_posts[user_id][network] = {}

    if city not in user_daily_posts[user_id][network]:
        user_daily_posts[user_id][network][city] = {"posts": [], "last_post_time": None}

    if remove:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        if user_daily_posts[user_id][network][city]["posts"]:
            user_daily_posts[user_id][network][city]["posts"].pop()
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        post_time = datetime.now()
        user_daily_posts[user_id][network][city]["posts"].append(post_time.isoformat())
        user_daily_posts[user_id][network][city]["last_post_time"] = post_time

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    if user_id not in user_statistics:
        user_statistics[user_id] = {"count": 0}
    user_statistics[user_id]["count"] += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_data()
    print(f"[DEBUG] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

@bot.message_handler(commands=['my_stats'])
def show_user_statistics(message):
    if message.chat.type != "private":
        return

    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )
        if stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_paid(user_id, network, city):
    if isinstance(user_id, str):  # –ï—Å–ª–∏ ID –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        user_id = int(user_id)

    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–µ—Ç—å {network}, –≥–æ—Ä–æ–¥ {city}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if user_id in paid_users:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö: {paid_users[user_id]}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        for entry in paid_users[user_id]:
            if entry["network"] == network and entry["city"] == city:
                end_date = entry["end_date"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'end_date'
                print(f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {end_date}, —Ç–∏–ø: {type(end_date)}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if isinstance(end_date, str):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
                    end_date = datetime.fromisoformat(end_date)
                elif isinstance(end_date, datetime):  # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç datetime
                    pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                else:
                    print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø end_date: {type(end_date)}")
                    return False
                if datetime.now() < end_date:
                    print("–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∞–∫—Ç—É–∞–ª–µ–Ω.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    return True
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫.")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    return False

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, " –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–∞.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ", callback_data="admin_add_paid_user"))
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö", callback_data="admin_list_paid_users"))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_duration"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"))
    markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_statistics"))
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_callback(call):
    try:
        if call.data == "admin_add_paid_user":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(call.message, process_user_id_for_payment)
        elif call.data == "admin_list_paid_users":
            show_paid_users(call.message)
        elif call.data == "admin_change_duration":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:")
            bot.register_next_step_handler(call.message, select_user_for_duration_change)
        elif call.data == "admin_add_admin":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            bot.register_next_step_handler(call.message, add_admin_step)
        elif call.data == "admin_statistics":
            show_statistics(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def process_user_id_for_payment(message):
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_network_for_payment(message, user_id):
    if message.text == "–ù–∞–∑–∞–¥":
        admin_panel(message)
        return

    network = message.text
    if network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        else:
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_city_for_payment(message, user_id, network):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
        return

    city = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü")
    bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_duration_for_payment(message, user_id, network, city):
    if message.text == "–ù–∞–∑–∞–¥":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        markup.add(*cities)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
        return

    duration = message.text
    if duration == "–î–µ–Ω—å":
        days = 1
    elif duration == "–ù–µ–¥–µ–ª—è":
        days = 7
    elif duration == "–ú–µ—Å—è—Ü":
        days = 30
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
        bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))
        return

    expiry_date = datetime.now() + timedelta(days=days)

    if user_id not in paid_users:
        paid_users[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º 'end_date'
    paid_users[user_id].append({
        "end_date": expiry_date.isoformat(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º isoformat –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        "network": network,
        "city": city
    })
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    bot.send_message(message.chat.id, f" ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω–µ–π. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date.strftime('%Y-%m-%d')}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin_step(message):
    try:
        new_admin_id = int(message.text)
        admins.append(new_admin_id)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
def show_paid_users(message):
    if not paid_users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return

    response = "–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, entries in paid_users.items():
        try:
            user_info = bot.get_chat(user_id)
            user_name = get_user_name(user_info)
        except Exception:
            user_name = f"(ID: {user_id})"
        
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}:\n"
        for entry in entries:
            end_date = entry["end_date"]
            if isinstance(end_date, str):
                end_date = datetime.fromisoformat(end_date)
            response += f" - –°–µ—Ç—å: {entry['network']}, –ì–æ—Ä–æ–¥: {entry['city']}, " + \
                       f"–°—Ä–æ–∫: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
    
    bot.send_message(message.chat.id, response)

def handle_duration_change(call):
    try:
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        for entry in paid_users[user_id]:
            end_date = entry["end_date"]
            if isinstance(end_date, str):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
                end_date = datetime.fromisoformat(end_date)
            entry["end_date"] = end_date + timedelta(days=days)

        save_data()
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")

def show_statistics(message):
    if not user_statistics:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, stats in user_statistics.items():
        user_info = bot.get_chat(user_id)
        user_name = get_user_name(user_info)
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: {stats['count']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
    bot.send_message(message.chat.id, response)

def get_admin_statistics():
    statistics = {}
    for user_id, posts in user_posts.items():
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        published_today = 0
        links = []
        details = {}

        for post in posts:
            if is_today(post["time"]):
                published_today += 1
                links.append(f"https://t.me/c/{str(post['chat_id'])[4:]}/{post['message_id']}")

                # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ç—è–º –∏ –≥–æ—Ä–æ–¥–∞–º
                network = post["network"]
                city = post["city"]
                if network not in details:
                    details[network] = {}
                if city not in details[network]:
                    details[network][city] = {"published": 0, "remaining": 3}
                details[network][city]["published"] += 1

        # –û–±—â–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ "–í—Å–µ —Å–µ—Ç–∏"
        if "–í—Å–µ —Å–µ—Ç–∏" in details:
            total_published = sum(
                data["published"]
                for network in details
                for city in details[network]
            )
            remaining = max(0, 9 - total_published)
        else:
            remaining = max(0, 3 - published_today)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics[user_id] = {
            "published": published_today,
            "remaining": remaining,
            "links": links,
            "details": details
        }
    return statistics

@bot.message_handler(commands=['statistics'])
def show_statistics(message):
    if message.chat.id not in admins:
        return

    stats = get_admin_statistics()
    if not stats:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, user_stats in stats.items():
        response += (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å: {user_stats['remaining']}\n"
            f"  - –°—Å—ã–ª–∫–∏: {', '.join(user_stats['links'])}\n"
        )
        if user_stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in user_stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
    bot.send_message(message.chat.id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_user_for_duration_change(message):
    try:
        user_id = int(message.text)
        if user_id not in paid_users:
            bot.send_message(message.chat.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("+1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_1"))
        markup.add(types.InlineKeyboardButton("+1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_7"))
        markup.add(types.InlineKeyboardButton("+1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_30"))
        markup.add(types.InlineKeyboardButton("-1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_-1"))
        markup.add(types.InlineKeyboardButton("-1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_-7"))
        markup.add(types.InlineKeyboardButton("-1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_-30"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_duration_"))
def handle_duration_change(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for entry in paid_users[user_id]:
            end_date = entry["end_date"]
            if isinstance(end_date, str):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
                end_date = datetime.fromisoformat(end_date)
            entry["end_date"] = end_date + timedelta(days=days)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def create_new_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_text)

def process_text(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞
    if message.photo or message.video:
        if message.photo:
            media_type = "photo"
            file_id = message.photo[-1].file_id
            text = message.caption if message.caption else ""
        elif message.video:
            media_type = "video"
            file_id = message.video.file_id
            text = message.caption if message.caption else ""
    elif message.text:
        media_type = None
        file_id = None
        text = message.text
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        bot.register_next_step_handler(message, process_text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if not validate_text_length(text):
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        bot.register_next_step_handler(message, process_text)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    confirm_text(message, text, media_type, file_id)

def confirm_text(message, text, media_type=None, file_id=None):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def handle_confirmation(message, text, media_type, file_id):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, " –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def select_network(message, text, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
        return

    selected_network = message.text
    if selected_network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif selected_network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif selected_network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        elif selected_network == "–í—Å–µ —Å–µ—Ç–∏":
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å':", reply_markup=markup)
        bot.register_next_step_handler(message, select_city_and_publish, text, selected_network, media_type, file_id)
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, process_text)

def select_city_and_publish(message, text, selected_network, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    city = message.text
    if city == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å":
        bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    if is_user_paid(message.from_user.id, selected_network, city):
        user_name = get_user_name(message.from_user)
        user_id = message.from_user.id

        if selected_network == "–í—Å–µ —Å–µ—Ç–∏":
            networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"]
        else:
            networks = [selected_network]

        for network in networks:
            if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
                chat_dict = chat_ids_mk
            elif network == "–ü–ê–†–ù–ò 18+":
                chat_dict = chat_ids_parni
            elif network == "–ù–°":
                chat_dict = chat_ids_ns
            else:
                continue  # –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            if network == "–ù–°" and city in ns_city_substitution:
                city = ns_city_substitution[city]

            if city in chat_dict:
                chat_id = chat_dict[city]
                if not check_daily_limit(user_id, network, city):
                    bot.send_message(message.chat.id, f" –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π (3 –≤ —Å—É—Ç–∫–∏) –¥–ª—è —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–∞ {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                    continue

                sent_message = publish_post(chat_id, text, user_name, user_id, media_type, file_id)
                if sent_message:
                    if message.chat.id not in user_posts:
                        user_posts[message.chat.id] = []
                    user_posts[message.chat.id].append({
                        "message_id": sent_message.message_id,
                        "chat_id": chat_id,
                        "time": datetime.now(),
                        "city": city,
                        "network": network
                    })
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                    update_daily_posts(user_id, network, city)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if user_id not in user_statistics:
                        user_statistics[user_id] = {"count": 0}
                    user_statistics[user_id]["count"] += 1
                    save_data()
                    bot.send_message(message.chat.id, f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–µ {city}.")
            else:
                bot.send_message(message.chat.id, f" –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
        ask_for_new_post(message)
    else:
        markup = types.InlineKeyboardMarkup()
        if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", url="https://t.me/FAQMKBOT"))
        else:
            markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", url="https://t.me/FAQZNAKBOT"))
        bot.send_message(message.chat.id, " –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–π —Å–µ—Ç–∏/–≥–æ—Ä–æ–¥–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=markup)

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
def ask_for_new_post(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_new_post_choice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def handle_new_post_choice(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! \n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def delete_post(message):
    if message.chat.id not in user_posts or not user_posts[message.chat.id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for post in user_posts[message.chat.id]:
        markup.add(f"–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ {post['city']} ({post['network']})")
    markup.add("–ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_delete_post)

def handle_delete_post(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.id not in user_posts or not user_posts[message.chat.id]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    for post in user_posts[message.chat.id]:
        if f"–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ {post['city']} ({post['network']})" == message.text:
            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
                bot.delete_message(post["chat_id"], post["message_id"])
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ user_posts
                user_posts[message.chat.id].remove(post)
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
                update_daily_posts(message.chat.id, post["network"], post["city"])
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                save_data()
                bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                return
            except Exception as e:
                bot.send_message(message.chat.id, f" –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    bot.send_message(message.chat.id, " –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def delete_all_posts(message):
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id not in user_posts or not user_posts[user_id]:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø
    for post in user_posts[user_id]:
        try:
            bot.delete_message(post["chat_id"], post["message_id"])
        except Exception as e:
            bot.send_message(user_id, f" –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_posts[user_id] = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()

    bot.send_message(user_id, "‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def publish_post(chat_id, text, user_name, user_id, media_type=None, file_id=None):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å –∏ –≥–æ—Ä–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ chat_id
        network = None
        city = None

        if chat_id in chat_ids_mk.values():
            network = "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±"
            for city_name, city_chat_id in chat_ids_mk.items():
                if city_chat_id == chat_id:
                    city = city_name
                    break
        elif chat_id in chat_ids_parni.values():
            network = "–ü–ê–†–ù–ò 18+"
            for city_name, city_chat_id in chat_ids_parni.items():
                if city_chat_id == chat_id:
                    city = city_name
                    break
        elif chat_id in chat_ids_ns.values():
            network = "–ù–°"
            for city_name, city_chat_id in chat_ids_ns.items():
                if city_chat_id == chat_id:
                    city = city_name
                    break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        if not check_daily_limit(user_id, network, city):
            bot.send_message(user_id, f" –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π (3 –≤ —Å—É—Ç–∫–∏) –¥–ª—è —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–∞ {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return None  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        signature = network_signatures.get(network, "")
        full_text = f" –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name}:\n\n{text}\n\n{signature}"

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–ø–∏—Å–∞—Ç—å"
        markup = types.InlineKeyboardMarkup()
        if not user_name.startswith("@"):  # –ï—Å–ª–∏ –Ω–µ—Ç username, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å"
            markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/user?id={user_id}"))

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if media_type == "photo":
            sent_message = bot.send_photo(chat_id, file_id, caption=full_text, reply_markup=markup)
        elif media_type == "video":
            sent_message = bot.send_video(chat_id, file_id, caption=full_text, reply_markup=markup)
        else:
            sent_message = bot.send_message(chat_id, full_text, reply_markup=markup)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
        update_daily_posts(user_id, network, city)
        save_data()

        return sent_message
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
def check_telegram_connection():
    try:
        response = requests.get("https://api.telegram.org")
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return False

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    try:
        app.run(host='0.0.0.0', port=8080)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ Flask: {e}")
        traceback.print_exc()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ bot.polling: {e}")
            traceback.print_exc()  # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

if __name__ == '__main__':
    if check_telegram_connection():
        # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.start()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        run_bot()
    else:
        print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")