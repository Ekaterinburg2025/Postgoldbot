import os
import time
import sqlite3
import threading
import json
import threading
from io import BytesIO
from datetime import datetime, timedelta
from collections import defaultdict

import pytz
from pytz import timezone
ekaterinburg_tz = timezone('Asia/Yekaterinburg')

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

from flask import Flask, request, Response

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_md(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# ADMIN ID (–≤–∞—à ID)
ADMIN_CHAT_ID = 479938867  # –í–∞—à ID

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
paid_users = {}
user_posts = {}
user_daily_posts = {}
user_statistics = {}
STATIC_ADMINS = {479938867, 7235010425}  # –°—Ç–∞—Ç–∏—á–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
db_lock = threading.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("""
                CREATE TABLE IF NOT EXISTS paid_users (
                    user_id INTEGER,
                    network TEXT,
                    city TEXT,
                    end_date TEXT
                )
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS admin_users (
                    user_id INTEGER PRIMARY KEY
                )
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_posts (
                    user_id INTEGER,
                    network TEXT,
                    city TEXT,
                    time TEXT,
                    chat_id INTEGER,
                    message_id INTEGER
                )
            """)
            conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_data():
    with db_lock:
        try:
            with sqlite3.connect("bot_data.db") as conn:
                cur = conn.cursor()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("SELECT user_id, network, city, end_date FROM paid_users")
                local_paid_users = {}
                for user_id, network, city, end_date in cur.fetchall():
                    if user_id not in local_paid_users:
                        local_paid_users[user_id] = []

                    # –ü—Ä–∏–≤–æ–¥–∏–º end_date –∫ datetime
                    if isinstance(end_date, datetime):
                        parsed_date = end_date
                    elif isinstance(end_date, str):
                        try:
                            parsed_date = datetime.fromisoformat(end_date)
                        except:
                            parsed_date = None
                    else:
                        parsed_date = None

                    local_paid_users[user_id].append({
                        "network": network,
                        "city": city,
                        "end_date": parsed_date
                    })

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
                cur.execute("SELECT user_id FROM admin_users")
                local_admins = [row[0] for row in cur.fetchall()]

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                cur.execute("SELECT user_id, network, city, time, chat_id, message_id FROM user_posts")
                local_user_posts = {}
                for user_id, network, city, time_str, chat_id, message_id in cur.fetchall():
                    if user_id not in local_user_posts:
                        local_user_posts[user_id] = []
                    try:
                        post_time = datetime.fromisoformat(time_str)
                    except:
                        post_time = datetime.now(ekaterinburg_tz)
                    local_user_posts[user_id].append({
                        "message_id": message_id,
                        "chat_id": chat_id,
                        "time": post_time,
                        "city": city,
                        "network": network
                    })

                # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                global paid_users, admins, user_posts
                paid_users = local_paid_users
                admins = local_admins
                user_posts = local_user_posts

                return paid_users, admins, user_posts

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")
            return {}, [], {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
paid_users, admins, user_posts = load_data()

# –°–ø–∏—Å–∫–∏ chat_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥–∞
chat_ids_mk = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002210043742,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002238514762,
    "–ü–µ—Ä–º—å": -1002205127231,
    "–ò–∂–µ–≤—Å–∫": -1001604781452,
    "–ö–∞–∑–∞–Ω—å": -1002228881675,
    "–û—Ä–µ–Ω–±—É—Ä–≥": -1002255568202,
    "–£—Ñ–∞": -1002196469365,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002235645677,
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": -1002248474008,
    "–ë–∞—Ä–Ω–∞—É–ª": -1002234471215,
    "–û–º—Å–∫": -1002151258573,
    "–°–∞—Ä–∞—Ç–æ–≤": -1002426762134,
    "–í–æ—Ä–æ–Ω–µ–∂": -1002207503508,
    "–°–∞–º–∞—Ä–∞": -1001852671383,
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": -1002167762598,
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": -1001631628911,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": -1002217056197,
    "–ò—Ä–∫—É—Ç—Å–∫": -1002210419274,
    "–ö–µ–º–µ—Ä–æ–≤–æ": -1002147522863,
    "–ú–æ—Å–∫–≤–∞": -1002208434096,
    "–°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥": -1002485776859,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –Æ–≥–∞": -1001814693664,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞": -1002161346845,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä": -1002210623988,
    "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ üõ†Ô∏è": -1002426733876
}

chat_ids_parni = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002413948841,
    "–¢—é–º–µ–Ω—å": -1002255622479,
    "–û–º—Å–∫": -1002274367832,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002406302365,
    "–ü–µ—Ä–º–∏": -1002280860973,
    "–ö—É—Ä–≥–∞–Ω": -1002469285352,
    "–•–ú–ê–û": -1002287709568,
    "–£—Ñ–∞": -1002448909000,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002261777025,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã "–ü–∞—Ä–Ω–∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    "–Ø–ú–ê–û": -1002371438340
}

# –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—É—é —Å–µ—Ç—å –ù–° —Å –Ω—É–∂–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
chat_ids_ns = {
    "–ö—É—Ä–≥–∞–Ω": -1001465465654,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1001824149334,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002233108474,
    "–ü–µ—Ä–º—å": -1001753881279,
    "–£—Ñ–∞": -1001823390636,
    "–Ø–º–∞–ª": -1002145851794,
    "–ú–æ—Å–∫–≤–∞": -1001938448310,
    "–•–ú–ê–û": -1001442597049,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66": -1002169473861,   # –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74": -1002193127380    # –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ß–µ–ª—è–±–∏–Ω—Å–∫—É
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ –ù–°
ns_city_substitution = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74"
}

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
network_signatures = {
    "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±": "Ô∏è üï∏Ô∏è–†–µ–∫–ª–∞–º–∞. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–µ–π —Å–µ—Ç–∏ –ú–ö.",
    "–ü–ê–†–ù–ò 18+": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´",
    "–ù–°": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return markup

def format_time(timestamp):
    tz = pytz.timezone('Asia/Yekaterinburg')
    local_time = timestamp.astimezone(tz)
    return local_time.strftime("%H:%M, %d %B %Y")

def format_time(dt):
    return dt.strftime("%d.%m %H:%M")

def get_user_name(user):
    name = escape_md(user.first_name)
    if user.username:
        return f"[{name}](https://t.me/{user.username})"
    else:
        return f"[{name}](tg://user?id={user.id})"

def add_paid_user(user_id, network, city, end_date):
    with db_lock:  
        if user_id not in paid_users:
            paid_users[user_id] = []
        paid_users[user_id].append({
            "network": network,
            "city": city,
            "end_date": end_date
        })
        save_data()

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")
    bot.send_message(user_id, f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")

def add_admin_user(user_id):
    with db_lock:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏
        if user_id not in admins:
            admins.append(user_id)
            save_data()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ SQLite-–±–∞–∑—É
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (user_id,))
            conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if user_id != ADMIN_CHAT_ID:
        bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    bot.send_message(user_id, "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

def load_admin_users():
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM admin_users")
            return [row[0] for row in cur.fetchall()]

def is_admin(user_id):
    STATIC_ADMINS = [479938867, 7235010425]  # ‚Üê –¥–æ–±–∞–≤—å —Å–≤–æ–∏ ID
    return user_id in STATIC_ADMINS or user_id in admins

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π "—Å–µ—Ç—å + –≥–æ—Ä–æ–¥"
def count_unique_networks_cities(user_id):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–µ—Ç–µ–π –∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_daily_posts:
        return 0

    unique_combinations = set()
    for network, cities in user_daily_posts[user_id].items():
        for city in cities:
            unique_combinations.add((network, city))

    return len(unique_combinations)

def is_new_day(last_post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å."""
    if last_post_time is None:
        return True
    return last_post_time.date() < datetime.now(ekaterinburg_tz).date()

def is_today(post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è."""
    return post_time.date() == datetime.now(ekaterinburg_tz).date()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
from pytz import timezone

ekaterinburg_tz = timezone('Asia/Yekaterinburg')

def select_duration_for_payment(message, user_id, network, city):
    try:
        global paid_users, chat_ids_mk, chat_ids_parni, chat_ids_ns, ekaterinburg_tz, ADMIN_CHAT_ID

        if message.text == "–ù–∞–∑–∞–¥":
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
            if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
                cities = list(chat_ids_mk.keys())
            elif network == "–ü–ê–†–ù–ò 18+":
                cities = list(chat_ids_parni.keys())
            elif network == "–ù–°":
                cities = list(chat_ids_ns.keys())
            else:
                cities = []
            markup.add(*cities)
            markup.add("–ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
            bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
            return

        duration = message.text.strip()
        if duration == "–î–µ–Ω—å":
            days = 1
        elif duration == "–ù–µ–¥–µ–ª—è":
            days = 7
        elif duration == "–ú–µ—Å—è—Ü":
            days = 30
        else:
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
            bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))
            return

        if 'ekaterinburg_tz' not in globals():
            from pytz import timezone
            ekaterinburg_tz = timezone("Asia/Yekaterinburg")

        end_date = datetime.now(ekaterinburg_tz) + timedelta(days=days)
        end_date_str = end_date.isoformat()

        if user_id not in paid_users:
            paid_users[user_id] = []

        paid_users[user_id].append({
            "end_date": end_date_str,
            "network": network,
            "city": city
        })

        save_data()

        try:
            user_info = bot.get_chat(user_id)
            user_name = f"{user_info.first_name or ''} {user_info.last_name or ''}".strip()
            if not user_name:
                user_name = user_info.username or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        except Exception:
            user_name = "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω.\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

def is_today(dt):
    return dt.date() == datetime.now(ekaterinburg_tz).date()

def get_user_statistics(user_id):
    stats = {"published": 0, "remaining": 0, "details": {}}
    limit_total = 0

    active_access = []
    for access in paid_users.get(user_id, []):
        end_date = access.get("end_date")
        if isinstance(end_date, str):
            try:
                end_date = datetime.fromisoformat(end_date)
            except:
                end_date = None

        if end_date and end_date >= datetime.now(ekaterinburg_tz):
            if access["network"] == "–í—Å–µ —Å–µ—Ç–∏":
                for net in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"]:
                    active_access.append((net, access["city"]))
            else:
                active_access.append((access["network"], access["city"]))

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ "–í—Å–µ —Å–µ—Ç–∏" –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫ —Å–µ—Ç–∏
    active_access = list(set(active_access))

    for network, city in active_access:
        total_posts = 0
        if user_id in user_daily_posts and network in user_daily_posts[user_id] and city in user_daily_posts[user_id][network]:
            post_data = user_daily_posts[user_id][network][city]
            active_posts = len([p for p in post_data.get("posts", []) if is_today(p)])
            deleted_posts = len([p for p in post_data.get("deleted_posts", []) if is_today(p)])
            total_posts = active_posts + deleted_posts

        limit_total += 3
        if network not in stats["details"]:
            stats["details"][network] = {}

        stats["details"][network][city] = {
            "published": total_posts,
            "remaining": max(0, 3 - total_posts)
        }
        stats["published"] += total_posts

    stats["remaining"] = max(0, limit_total - stats["published"])
    return stats

def is_today(timestamp):
    now = datetime.now(ekaterinburg_tz)
    try:
        parsed_time = datetime.fromisoformat(timestamp) if isinstance(timestamp, str) else timestamp
        return parsed_time.date() == now.date()
    except:
        return False

def check_payment(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É."""
    if user_id not in paid_users:
        return False

    for payment in paid_users[user_id]:
        end_date = payment.get("end_date")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç—Ä–æ–∫–∞
        if isinstance(end_date, str):
            try:
                end_date = datetime.fromisoformat(end_date)
            except:
                continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
        if not isinstance(end_date, datetime):
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫
        if end_date < datetime.now(ekaterinburg_tz):
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if (payment["network"] == "–í—Å–µ —Å–µ—Ç–∏" and payment["city"] == city) or \
           (payment["network"] == network and payment["city"] == city):
            return True

    return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(retries=3, delay=0.5):
    for attempt in range(retries):
        with db_lock:
            try:
                with sqlite3.connect("bot_data.db", timeout=5) as conn:
                    cur = conn.cursor()

                    cur.execute("DELETE FROM paid_users")
                    cur.execute("DELETE FROM admin_users")
                    cur.execute("DELETE FROM user_posts")

                    # üíæ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ
                    for user_id, entries in paid_users.items():
                        for entry in entries:
                            end_date = entry.get("end_date")
                            if isinstance(end_date, datetime):
                                end_date_str = end_date.isoformat()
                            elif isinstance(end_date, str):
                                end_date_str = end_date
                            else:
                                end_date_str = None

                            if end_date_str is None:
                                print(f"[SAVE WARNING] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç–æ–π –¥–∞—Ç–æ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏

                            cur.execute("""
                                INSERT INTO paid_users (user_id, network, city, end_date)
                                VALUES (?, ?, ?, ?)
                            """, (user_id, entry["network"], entry["city"], end_date_str))

                    # üíæ –ê–¥–º–∏–Ω—ã
                    for admin_id in admins:
                        cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (admin_id,))

                    # üíæ –ü–æ—Å—Ç—ã
                    for user_id, posts in user_posts.items():
                        for post in posts:
                            time_str = post["time"]
                            if isinstance(time_str, datetime):
                                time_str = time_str.isoformat()
                            cur.execute("""
                                INSERT INTO user_posts (user_id, network, city, time, chat_id, message_id)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """, (
                                user_id, post["network"], post["city"],
                                time_str, post["chat_id"], post["message_id"]
                            ))

                    conn.commit()
                    return
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e).lower():
                    time.sleep(delay)
                    continue
                else:
                    print(f"[SAVE ERROR] {e}")
                    break
            except Exception as e:
                print(f"[SAVE ERROR] {e}")
                break

def save_backup_to_json():
    with db_lock:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ paid_users
        safe_paid_users = {}
        for user_id, entries in paid_users.items():
            safe_paid_users[user_id] = []
            for entry in entries:
                end_date = entry.get("end_date")
                if isinstance(end_date, datetime):
                    end_date = end_date.replace(tzinfo=None).isoformat()
                safe_paid_users[user_id].append({
                    "network": entry.get("network"),
                    "city": entry.get("city"),
                    "end_date": end_date
                })

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ user_posts
        safe_user_posts = {}
        for user_id, posts in user_posts.items():
            safe_user_posts[user_id] = []
            for post in posts:
                post_copy = post.copy()
                if isinstance(post_copy.get("time"), datetime):
                    post_copy["time"] = post_copy["time"].replace(tzinfo=None).isoformat()
                safe_user_posts[user_id].append(post_copy)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ user_daily_posts
        safe_daily = {}
        for user_id, networks in user_daily_posts.items():
            safe_daily[user_id] = {}
            for network, cities in networks.items():
                safe_daily[user_id][network] = {}
                for city, data in cities.items():
                    safe_daily[user_id][network][city] = {
                        "posts": [p.replace(tzinfo=None).isoformat() for p in data.get("posts", [])],
                        "deleted_posts": [d.replace(tzinfo=None).isoformat() for d in data.get("deleted_posts", [])]
                    }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë
        data = {
            "paid_users": safe_paid_users,
            "user_posts": safe_user_posts,
            "user_daily_posts": safe_daily,
            "admins": admins
        }

        json_data = json.dumps(data, indent=2)
        return BytesIO(json_data.encode("utf-8"))

@bot.message_handler(commands=['start'])
def start(message):
    try:
        if message.chat.type != "private":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        if message.chat.id not in user_posts:
            user_posts[message.chat.id] = []

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø PostGoldBot. üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

from collections import defaultdict

def check_daily_limit(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_daily_posts:
        user_daily_posts[user_id] = defaultdict(lambda: defaultdict(lambda: {
            "posts": [],
            "deleted_posts": [],
            "last_post_time": None
        }))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if is_new_day(user_daily_posts[user_id][network][city]["last_post_time"]):
        user_daily_posts[user_id][network][city]["posts"] = []
        user_daily_posts[user_id][network][city]["deleted_posts"] = []
        print(f"[DEBUG] –ù–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    active_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["posts"] if is_today(post_time))
    deleted_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["deleted_posts"] if is_today(post_time))
    total_posts = active_posts + deleted_posts

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    unique_combinations = count_unique_networks_cities(user_id)
    if unique_combinations == 0:
        return False  # –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

    # üîß –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ª–∏–º–∏—Ç–∞: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
    limit = 3 * unique_combinations

    return total_posts < limit


def update_daily_posts(user_id, network, city, remove=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    with db_lock:
        try:
            if user_id not in user_daily_posts:
                user_daily_posts[user_id] = {}

            if network not in user_daily_posts[user_id]:
                user_daily_posts[user_id][network] = {}

            if city not in user_daily_posts[user_id][network]:
                user_daily_posts[user_id][network][city] = {"posts": [], "deleted_posts": []}

            current_time = datetime.now(ekaterinburg_tz)

            if remove:
                if user_daily_posts[user_id][network][city]["posts"]:
                    deleted_post = user_daily_posts[user_id][network][city]["posts"].pop()
                    user_daily_posts[user_id][network][city]["deleted_posts"].append(deleted_post)
                    print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")
            else:
                user_daily_posts[user_id][network][city]["posts"].append(current_time)
                print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

            save_data()
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['my_stats'])
def show_user_statistics(message):
    if message.chat.type != "private":
        return

    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )
        if stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_paid(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É, –≤–∫–ª—é—á–∞—è '–í—Å–µ —Å–µ—Ç–∏'."""
    if isinstance(user_id, str):
        user_id = int(user_id)

    if user_id not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    for entry in paid_users[user_id]:
        if entry["city"] != city:
            continue

        if entry["network"] == "–í—Å–µ —Å–µ—Ç–∏" or entry["network"] == network:
            end_date = entry["end_date"]

            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except ValueError:
                    print(f"[WARN] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {entry['end_date']}")
                    continue

            if isinstance(end_date, datetime) and datetime.now(ekaterinburg_tz) < end_date:
                print(f"[DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: {entry}")
                return True
            else:
                print(f"[DEBUG] –°—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫: {entry}")

    print(f"[DEBUG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ {network}, {city}")
    return False

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, " –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ", callback_data="admin_add_paid_user"))
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö", callback_data="admin_list_paid_users"))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_duration"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_statistics"))
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_callback(call):
    try:
        if call.data == "admin_add_paid_user":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(call.message, process_user_id_for_payment)
        elif call.data == "admin_list_paid_users":
            show_paid_users(call.message)
        elif call.data == "admin_change_duration":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:")
            bot.register_next_step_handler(call.message, select_user_for_duration_change)
        elif call.data == "admin_add_admin":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            bot.register_next_step_handler(call.message, add_admin_step)
        elif call.data == "admin_statistics":
            show_statistics_for_admin(call.message.chat.id)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤ admin_callback: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def process_user_id_for_payment(message):
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_network_for_payment(message, user_id):
    if message.text == "–ù–∞–∑–∞–¥":
        admin_panel(message)
        return

    network = message.text
    if network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        else:
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_city_for_payment(message, user_id, network):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
        return

    city = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü")
    bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin_step(message):
    try:
        new_admin_id = int(message.text)
        admins.append(new_admin_id)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
def show_paid_users(message):
    if not paid_users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return

    response = "–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, entries in paid_users.items():
        try:
            user_info = bot.get_chat(user_id)
            user_name = get_user_name(user_info)
        except Exception:
            user_name = f"(ID: {user_id})"
        
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}:\n"
        for entry in entries:
            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            if isinstance(end_date, datetime):
                date_str = end_date.strftime('%d.%m.%Y %H:%M')
            else:
                date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            response += f" - –°–µ—Ç—å: {entry['network']}, –ì–æ—Ä–æ–¥: {entry['city']}, –°—Ä–æ–∫: {date_str}\n"

    bot.send_message(message.chat.id, response)

def get_all_cities_for_network(network):
    if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
        return list(chat_ids_mk.keys())
    elif network == "–ü–ê–†–ù–ò 18+":
        return list(chat_ids_parni.keys())
    elif network == "–ù–°":
        return list(chat_ids_ns.keys())
    elif network == "–í—Å–µ —Å–µ—Ç–∏":
        return list(set(chat_ids_mk.keys()) | set(chat_ids_parni.keys()) | set(chat_ids_ns.keys()))
    return []

def handle_duration_change(call):
    try:
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        for entry in paid_users[user_id]:
            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            if isinstance(end_date, datetime):
                entry["end_date"] = end_date + timedelta(days=days)

        save_data()
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

def get_admin_statistics():
    statistics = {}

    for user_id, networks in user_daily_posts.items():
        stats = {"published": 0, "remaining": 0, "details": {}, "links": []}
        limit_total = 0

        for network, cities in networks.items():
            stats["details"][network] = {}
            for city, post_data in cities.items():
                active_posts = len(post_data.get("posts", []))
                deleted_posts = len(post_data.get("deleted_posts", []))
                total_posts = active_posts + deleted_posts

                limit_total += 3

                stats["details"][network][city] = {
                    "published": total_posts,
                    "remaining": max(0, 3 - total_posts)
                }

                stats["published"] += total_posts

                for post in post_data.get("posts", []):
                    if isinstance(post, datetime) and is_today(post):
                        for user_post in user_posts.get(user_id, []):
                            if user_post["network"] == network and user_post["city"] == city:
                                stats.setdefault("links", []).append(
                                    f"https://t.me/c/{str(user_post['chat_id'])[4:]}/{user_post['message_id']}"
                                )

        stats["remaining"] = max(0, limit_total - stats["published"])
        statistics[user_id] = stats

    return statistics

@bot.message_handler(commands=['statistics'])
def show_statistics_for_admin(chat_id):
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    stats = get_admin_statistics()
    if not stats:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, user_stats in stats.items():
        user_name = f"ID {user_id}"

        response += (
            f"üë§ {user_name}:\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {user_stats['remaining']}\n"
        )

        if user_stats["details"]:
            response += "  ‚Ä¢ –î–µ—Ç–∞–ª–∏:\n"
            for network, cities in user_stats["details"].items():
                for city, data in cities.items():
                    end_date = None
                    for paid in paid_users.get(user_id, []):
                        if (
                            (paid.get("network") == network and paid.get("city") == city) or
                            (paid.get("network") == "–í—Å–µ —Å–µ—Ç–∏" and paid.get("city") == city)
                        ):
                            end_date_raw = paid.get("end_date")
                            if isinstance(end_date_raw, str):
                                try:
                                    end_date = datetime.fromisoformat(end_date_raw)
                                except:
                                    end_date = None
                            elif isinstance(end_date_raw, datetime):
                                end_date = end_date_raw
                            break

                    # üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    expire_str = f"(–¥–æ {end_date.strftime('%d.%m.%Y')})" if isinstance(end_date, datetime) else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

                    response += f"    - {network}, {city} {expire_str}: {data['published']} / {data['remaining']}\n"

        if user_stats["links"]:
            response += "  ‚Ä¢ –°—Å—ã–ª–∫–∏:\n"
            for link in user_stats["links"]:
                response += f"    - {link}\n"

        response += "\n"

    try:
        bot.send_message(chat_id, response)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_user_for_duration_change(message):
    try:
        user_id = int(message.text)
        if user_id not in paid_users:
            bot.send_message(message.chat.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("+1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_1"))
        markup.add(types.InlineKeyboardButton("+1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_7"))
        markup.add(types.InlineKeyboardButton("+1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_30"))
        markup.add(types.InlineKeyboardButton("-1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_-1"))
        markup.add(types.InlineKeyboardButton("-1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_-7"))
        markup.add(types.InlineKeyboardButton("-1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_-30"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_duration_"))
def handle_duration_change(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for entry in paid_users[user_id]:
            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            if isinstance(end_date, datetime):
                entry["end_date"] = end_date + timedelta(days=days)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def create_new_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_text)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_delete_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for post in user_posts[message.chat.id]:
            time_formatted = format_time(post["time"])
            button_text = f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}"
            markup.add(button_text)
        markup.add("–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def handle_delete_all_posts(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_all_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

def process_delete_choice(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    else:
        try:
            for post in user_posts[message.chat.id]:
                time_formatted = format_time(post["time"])
                if message.text == f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}":
                    try:
                        bot.delete_message(post["chat_id"], post["message_id"])
                    except Exception:
                        pass
                    user_posts[message.chat.id].remove(post)
                    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_keyboard())
                    return
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

def process_delete_all_choice(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        for post in user_posts[message.chat.id]:
            try:
                bot.delete_message(post["chat_id"], post["message_id"])
            except Exception:
                pass
        user_posts[message.chat.id] = []
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

def process_text(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    if message.photo or message.video:
        if message.photo:
            media_type = "photo"
            file_id = message.photo[-1].file_id
            text = message.caption if message.caption else ""
        elif message.video:
            media_type = "video"
            file_id = message.video.file_id
            text = message.caption if message.caption else ""
    elif message.text:
        media_type = None
        file_id = None
        text = message.text
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        bot.register_next_step_handler(message, process_text)
        return

    confirm_text(message, text, media_type, file_id)

def confirm_text(message, text, media_type=None, file_id=None):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def handle_confirmation(message, text, media_type, file_id):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def get_network_markup():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏", "–ù–∞–∑–∞–¥")
    return markup

def select_network(message, text, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
        return

    selected_network = message.text
    if selected_network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif selected_network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif selected_network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        elif selected_network == "–í—Å–µ —Å–µ—Ç–∏":
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å':", reply_markup=markup)
        bot.register_next_step_handler(message, select_city_and_publish, text, selected_network, media_type, file_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, process_text)

def select_city_and_publish(message, text, selected_network, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    city = message.text
    if city == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    user_id = message.from_user.id
    user_name = get_user_name(message.from_user)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_user_paid(user_id, selected_network, city):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", url="https://t.me/FAQMKBOT" if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±" else "https://t.me/FAQZNAKBOT"))
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–π —Å–µ—Ç–∏/–≥–æ—Ä–æ–¥–µ.", reply_markup=markup)
        return

    networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"] if selected_network == "–í—Å–µ —Å–µ—Ç–∏" else [selected_network]

    for network in networks:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
        if not is_user_paid(user_id, network, city):
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É
        user_stats = get_user_statistics(user_id)
        city_stats = user_stats.get("details", {}).get(network, {}).get(city, {})
        if city_stats.get("remaining", 0) <= 0:
            bot.send_message(message.chat.id, f"‚õî –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è {network}, –≥–æ—Ä–æ–¥ {city}")
            continue

        # –ü–æ–¥–ø–∏—Å—å –¥–ª—è —Å–µ—Ç–∏
        signature = network_signatures.get(network, "")
        full_text = f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name}:\n\n{text}\n\n{signature}"

        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            chat_dict = chat_ids_mk
        elif network == "–ü–ê–†–ù–ò 18+":
            chat_dict = chat_ids_parni
        elif network == "–ù–°":
            chat_dict = chat_ids_ns
        else:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
        if network == "–ù–°" and city not in chat_dict and city in ns_city_substitution:
            substitute_city = ns_city_substitution[city]
            chat_id = chat_dict.get(substitute_city)
        else:
            chat_id = chat_dict.get(city)

        if not chat_id:
            bot.send_message(message.chat.id, f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
            continue

        try:
            if media_type == "photo":
                sent_message = bot.send_photo(chat_id, file_id, caption=full_text, parse_mode="Markdown")
            elif media_type == "video":
                sent_message = bot.send_video(chat_id, file_id, caption=full_text, parse_mode="Markdown")
            else:
                sent_message = bot.send_message(chat_id, full_text, parse_mode="Markdown")

            # user_posts
            if user_id not in user_posts:
                user_posts[user_id] = []
            user_posts[user_id].append({
                "message_id": sent_message.message_id,
                "chat_id": chat_id,
                "time": datetime.now(ekaterinburg_tz),
                "city": city,
                "network": network
            })

            # user_daily_posts
            if user_id not in user_daily_posts:
                user_daily_posts[user_id] = {}
            if network not in user_daily_posts[user_id]:
                user_daily_posts[user_id][network] = {}
            if city not in user_daily_posts[user_id][network]:
                user_daily_posts[user_id][network][city] = {"posts": [], "deleted_posts": []}

            user_daily_posts[user_id][network][city]["posts"].append(datetime.now(ekaterinburg_tz))

            bot.send_message(message.chat.id, f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–µ {city}.")

        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e.description}")

    ask_for_new_post(message)

def ask_for_new_post(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_new_post_choice)

def handle_new_post_choice(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üôå\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats_button(message):
    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )

        if stats["details"]:
            response += "\nüìç –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    end_date = None
                    for paid in paid_users.get(message.from_user.id, []):
                        if (
                            (paid["network"] == network and paid["city"] == city) or
                            (paid["network"] == "–í—Å–µ —Å–µ—Ç–∏" and paid["city"] == city)
                        ):
                            end_date = paid.get("end_date")
                            break

                    if isinstance(end_date, str):
                        try:
                            end_date = datetime.fromisoformat(end_date)
                        except:
                            end_date = None

                    expire_str = f"(–¥–æ {end_date.strftime('%d.%m.%Y')})" if isinstance(end_date, datetime) else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
                    response += (
                        f"  ‚îî {network}, {city} {expire_str}: "
                        f"{data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
                    )

        bot.send_message(message.chat.id, response)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def show_statistics_for_admin(chat_id):
    if not is_admin(chat_id):
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    stats = get_admin_statistics()
    if not stats:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, user_stats in stats.items():
        user_name = f"ID {user_id}"

        response += (
            f"üë§ {user_name}:\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {user_stats['remaining']}\n"
        )

        if user_stats["details"]:
            response += "  ‚Ä¢ –î–µ—Ç–∞–ª–∏:\n"
            for network, cities in user_stats["details"].items():
                for city, data in cities.items():
                    end_date = None
                    for paid in paid_users.get(user_id, []):
                        if (
                            (paid.get("network") == network and paid.get("city") == city) or
                            (paid.get("network") == "–í—Å–µ —Å–µ—Ç–∏" and paid.get("city") == city)
                        ):
                            end_date = paid.get("end_date")
                            break

                    if isinstance(end_date, str):
                        try:
                            end_date = datetime.fromisoformat(end_date)
                        except:
                            end_date = None

                    expire_str = f"(–¥–æ {end_date.strftime('%d.%m.%Y')})" if end_date else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
                    response += f"    - {network}, {city} {expire_str}: {data['published']} / {data['remaining']}\n"

        if user_stats["links"]:
            response += "  ‚Ä¢ –°—Å—ã–ª–∫–∏:\n"
            for link in user_stats["links"]:
                response += f"    - {link}\n"

        response += "\n"

    try:
        bot.send_message(chat_id, response)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['backup'])
def handle_backup(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    backup_file = save_backup_to_json()
    bot.send_document(message.chat.id, backup_file, caption="üì¶ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö", visible_file_name="backup.json")

@bot.message_handler(commands=['restore'])
def handle_restore_start(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    bot.send_message(message.chat.id, "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª JSON –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, handle_restore_file)

def handle_restore_file(message):
    if not message.document:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π .json —Ñ–∞–π–ª.")
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded = bot.download_file(file_info.file_path)

        bot.send_message(message.chat.id, "üì• –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

        success = restore_data_from_json(downloaded.decode("utf-8"))

        if success:
            bot.send_message(message.chat.id, "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def restore_data_from_json(json_data):
    try:
        data = json.loads(json_data)

        with db_lock:
            global paid_users, user_posts, user_daily_posts, admins  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ global

            # üë§ –û–ø–ª–∞—Ç–∏–≤—à–∏–µ
            temp_paid_users = {}
            for user_id, entries in data.get("paid_users", {}).items():
                uid = int(user_id)
                temp_paid_users[uid] = []
                for entry in entries:
                    end_date = entry.get("end_date")
                    if isinstance(end_date, str):
                        try:
                            end_date = datetime.fromisoformat(end_date)
                        except Exception:
                            end_date = None
                    temp_paid_users[uid].append({
                        "network": entry.get("network"),
                        "city": entry.get("city"),
                        "end_date": end_date
                    })
            paid_users = temp_paid_users  # —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω

            # üì® –ü–æ—Å—Ç—ã
            temp_user_posts = {}
            for user_id, posts in data.get("user_posts", {}).items():
                uid = int(user_id)
                temp_user_posts[uid] = []
                for post in posts:
                    try:
                        post["time"] = datetime.fromisoformat(post["time"])
                    except Exception:
                        post["time"] = datetime.now()
                    temp_user_posts[uid].append(post)
            user_posts = temp_user_posts

            # üìä –õ–∏–º–∏—Ç—ã
            temp_user_daily = {}
            for user_id, networks in data.get("user_daily_posts", {}).items():
                uid = int(user_id)
                temp_user_daily[uid] = {}
                for network, cities in networks.items():
                    temp_user_daily[uid][network] = {}
                    for city, post_data in cities.items():
                        posts = []
                        deleted = []
                        for p in post_data.get("posts", []):
                            try:
                                posts.append(datetime.fromisoformat(p))
                            except:
                                continue
                        for d in post_data.get("deleted_posts", []):
                            try:
                                deleted.append(datetime.fromisoformat(d))
                            except:
                                continue
                        temp_user_daily[uid][network][city] = {
                            "posts": posts,
                            "deleted_posts": deleted
                        }
            user_daily_posts = temp_user_daily

            # üõ° –ê–¥–º–∏–Ω—ã
            admins = [int(a) for a in data.get("admins", [])]

            save_data()

        return True

    except Exception as e:
        print(f"[RESTORE ERROR] {e}")
        return False

def schedule_daily_backup():
    def task():
        ekb_tz = pytz.timezone("Asia/Yekaterinburg")
        while True:
            now = datetime.now(ekb_tz)
            if now.hour == 1 and now.minute == 0:
                backup_file = save_backup_to_json()
                try:
                    bot.send_document(ADMIN_CHAT_ID, backup_file, caption="üïì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø", visible_file_name="daily_backup.json")
                except Exception as e:
                    print(f"[ERROR] –ê–≤—Ç–æ–±—ç–∫–∞–ø: {e}")
                time.sleep(60)  # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å
            time.sleep(30)

    threading.Thread(target=task, daemon=True).start()

schedule_daily_backup()

if __name__ == '__main__':
    import time  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –¥–ª—è –ø–∞—É–∑—ã –º–µ–∂–¥—É remove –∏ set webhook

    # ‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    STATIC_ADMINS = [479938867, 7235010425]
    for admin_id in STATIC_ADMINS:
        add_admin_user(admin_id)

    # ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –î–æ–±–∞–≤—å –≤ Render –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if WEBHOOK_URL:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL)
    else:
        print("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    # ‚úÖ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)