import os
import time
import sqlite3
import threading
from datetime import datetime, timedelta
from collections import defaultdict

import pytz
from pytz import timezone

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

from flask import Flask, request, Response

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_md(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# ADMIN ID (–≤–∞—à ID)
ADMIN_CHAT_ID = 479938867  # –í–∞—à ID

# –°–ø–∏—Å–∫–∏ chat_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥–∞
chat_ids_mk = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002210043742,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002238514762,
    "–ü–µ—Ä–º—å": -1002205127231,
    "–ò–∂–µ–≤—Å–∫": -1001604781452,
    "–ö–∞–∑–∞–Ω—å": -1002228881675,
    "–û—Ä–µ–Ω–±—É—Ä–≥": -1002255568202,
    "–£—Ñ–∞": -1002196469365,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002235645677,
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": -1002248474008,
    "–ë–∞—Ä–Ω–∞—É–ª": -1002234471215,
    "–û–º—Å–∫": -1002151258573,
    "–°–∞—Ä–∞—Ç–æ–≤": -1002426762134,
    "–í–æ—Ä–æ–Ω–µ–∂": -1002207503508,
    "–°–∞–º–∞—Ä–∞": -1001852671383,
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": -1002167762598,
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": -1001631628911,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": -1002217056197,
    "–ò—Ä–∫—É—Ç—Å–∫": -1002210419274,
    "–ö–µ–º–µ—Ä–æ–≤–æ": -1002147522863,
    "–ú–æ—Å–∫–≤–∞": -1002208434096,
    "–°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥": -1002485776859,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –Æ–≥–∞": -1001814693664,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞": -1002161346845,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä": -1002210623988,
    "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ üõ†Ô∏è": -1002426733876
}

chat_ids_parni = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002413948841,
    "–¢—é–º–µ–Ω—å": -1002255622479,
    "–û–º—Å–∫": -1002274367832,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002406302365,
    "–ü–µ—Ä–º–∏": -1002280860973,
    "–ö—É—Ä–≥–∞–Ω": -1002469285352,
    "–•–ú–ê–û": -1002287709568,
    "–£—Ñ–∞": -1002448909000,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002261777025,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã "–ü–∞—Ä–Ω–∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    "–Ø–ú–ê–û": -1002371438340
}

# –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—É—é —Å–µ—Ç—å –ù–° —Å –Ω—É–∂–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
chat_ids_ns = {
    "–ö—É—Ä–≥–∞–Ω": -1001465465654,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1001824149334,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002233108474,
    "–ü–µ—Ä–º—å": -1001753881279,
    "–£—Ñ–∞": -1001823390636,
    "–Ø–º–∞–ª": -1002145851794,
    "–ú–æ—Å–∫–≤–∞": -1001938448310,
    "–•–ú–ê–û": -1001442597049,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66": -1002169473861,   # –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74": -1002193127380    # –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ß–µ–ª—è–±–∏–Ω—Å–∫—É
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–µ—Ç–∏ –ù–°
ns_city_substitution = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74"
}

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
network_signatures = {
    "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±": "Ô∏è üï∏Ô∏è–†–µ–∫–ª–∞–º–∞. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–µ–π —Å–µ—Ç–∏ –ú–ö.",
    "–ü–ê–†–ù–ò 18+": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´",
    "–ù–°": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    return markup

def format_time(timestamp):
    tz = pytz.timezone('Asia/Yekaterinburg')
    local_time = timestamp.astimezone(tz)
    return local_time.strftime("%H:%M, %d %B %Y")

def format_time(dt):
    return dt.strftime("%d.%m %H:%M")

def get_user_name(user):
    name = escape_md(user.first_name)
    if user.username:
        return f"[{name}](https://t.me/{user.username})"
    else:
        return f"[{name}](tg://user?id={user.id})"

def add_paid_user(user_id, network, city, end_date):
    with db_lock:  
        if user_id not in paid_users:
            paid_users[user_id] = []
        paid_users[user_id].append({
            "network": network,
            "city": city,
            "end_date": end_date
        })
        save_data()

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")
    bot.send_message(user_id, f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")

def add_admin_user(user_id):
    with db_lock:
        if user_id not in admins:
            admins.append(user_id)
            save_data()

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    bot.send_message(user_id, "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

def load_admin_users():
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM admin_users")
            admin_users = [row[0] for row in cur.fetchall()]
            return admin_users  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def add_admin_user(user_id):
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (user_id,))
            conn.commit()

def is_admin(user_id):
    admin_users = load_admin_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admin_users  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in admins

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π "—Å–µ—Ç—å + –≥–æ—Ä–æ–¥"
def count_unique_networks_cities(user_id):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–µ—Ç–µ–π –∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_daily_posts:
        return 0

    unique_combinations = set()
    for network, cities in user_daily_posts[user_id].items():
        for city in cities:
            unique_combinations.add((network, city))

    return len(unique_combinations)

def is_new_day(last_post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å."""
    if last_post_time is None:
        return True
    return last_post_time.date() < datetime.now().date()

def is_today(post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è."""
    return post_time.date() == datetime.now().date()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_duration_for_payment(message, user_id, network, city):
    if message.text == "–ù–∞–∑–∞–¥":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        markup.add(*cities)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
        return

    duration = message.text
    if duration == "–î–µ–Ω—å":
        days = 1
    elif duration == "–ù–µ–¥–µ–ª—è":
        days = 7
    elif duration == "–ú–µ—Å—è—Ü":
        days = 30
    else:
        bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
        bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))
        return

    expiry_date = datetime.now() + timedelta(days=days)

    if user_id not in paid_users:
        paid_users[user_id] = []

    paid_users[user_id].append({
        "end_date": expiry_date.isoformat(),
        "network": network,
        "city": city
    })
    save_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    try:
        user_info = bot.get_chat(user_id)
        user_name = f"{user_info.first_name or ''} {user_info.last_name or ''}".strip()
        if not user_name:
            user_name = user_info.username or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    except Exception as e:
        user_name = "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    bot.send_message(
        ADMIN_CHAT_ID,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω.\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date.strftime('%d.%m.%Y')}"
    )

def get_user_statistics(user_id):
    stats = {"published": 0, "remaining": 0, "details": {}}
    if user_id in user_daily_posts:
        limit_total = 0  # –æ–±—â–∏–π –ª–∏–º–∏—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ—Å—Ç—É–ø–∞–º

        for network, cities in user_daily_posts[user_id].items():
            stats["details"][network] = {}
            for city, post_data in cities.items():
                # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
                if not is_user_paid(user_id, network, city):
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ

                active_posts = len(post_data.get("posts", []))
                deleted_posts = len(post_data.get("deleted_posts", []))
                total_posts = active_posts + deleted_posts

                limit_total += 3  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω

                stats["details"][network][city] = {
                    "published": total_posts,
                    "remaining": max(0, 3 - total_posts)
                }

                stats["published"] += total_posts

        stats["remaining"] = max(0, limit_total - stats["published"])

    return stats

def is_today(timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é."""
    now = datetime.now()
    return datetime.fromisoformat(timestamp).date() == now.date()

def check_payment(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É."""
    if str(user_id) not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    for payment in paid_users[str(user_id)]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã
        if payment["expiry_date"] < datetime.now():
            print(f"[DEBUG] –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {payment}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏

        # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ç—è–º –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        if payment["network"] == "–í—Å–µ —Å–µ—Ç–∏" and payment["city"] == city:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ç—è–º –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            return True

        # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É
        if payment["network"] == network and payment["city"] == city:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ {network} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
            return True

    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ {network} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.")
    return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(retries=3, delay=0.5):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."""
    for attempt in range(retries):
        with db_lock:  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
            try:
                with sqlite3.connect("bot_data.db", timeout=5) as conn:  # timeout –ø–æ–º–æ–∂–µ—Ç —Ç–æ–∂–µ
                    cur = conn.cursor()

                    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    cur.execute("DELETE FROM paid_users")
                    cur.execute("DELETE FROM admin_users")
                    cur.execute("DELETE FROM user_posts")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    for user_id, entries in paid_users.items():
                        for entry in entries:
                            cur.execute("""
                                INSERT INTO paid_users (user_id, network, city, end_date)
                                VALUES (?, ?, ?, ?)
                            """, (user_id, entry["network"], entry["city"], entry["end_date"].isoformat()))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                    for user_id in admin_users:
                        cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (user_id,))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    for user_id, posts in user_posts.items():
                        for post in posts:
                            cur.execute("""
                                INSERT INTO user_posts (user_id, network, city, time, chat_id, message_id)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """, (
                                user_id, post["network"], post["city"],
                                post["time"], post["chat_id"], post["message_id"]
                            ))

                    conn.commit()
                    print("[DEBUG] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                    return  # –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e).lower():
                    print(f"[WARN] –ü–æ–ø—ã—Ç–∫–∞ {attempt+1} ‚Äî –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    time.sleep(delay)
                else:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    break
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                break
    else:
        print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        if message.chat.type != "private":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        if message.chat.id not in user_posts:
            user_posts[message.chat.id] = []

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø PostGoldBot. üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

from collections import defaultdict

def check_daily_limit(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_daily_posts:
        user_daily_posts[user_id] = defaultdict(lambda: defaultdict(lambda: {
            "posts": [],
            "deleted_posts": [],
            "last_post_time": None
        }))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if is_new_day(user_daily_posts[user_id][network][city]["last_post_time"]):
        user_daily_posts[user_id][network][city]["posts"] = []
        user_daily_posts[user_id][network][city]["deleted_posts"] = []
        print(f"[DEBUG] –ù–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    active_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["posts"] if is_today(post_time))
    deleted_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["deleted_posts"] if is_today(post_time))
    total_posts = active_posts + deleted_posts

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    unique_combinations = count_unique_networks_cities(user_id)
    if unique_combinations == 0:
        return False  # –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

    # üîß –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ª–∏–º–∏—Ç–∞: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
    limit = 3 * unique_combinations

    return total_posts < limit


def update_daily_posts(user_id, network, city, remove=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    with db_lock:
        try:
            if user_id not in user_daily_posts:
                user_daily_posts[user_id] = {}

            if network not in user_daily_posts[user_id]:
                user_daily_posts[user_id][network] = {}

            if city not in user_daily_posts[user_id][network]:
                user_daily_posts[user_id][network][city] = {"posts": [], "deleted_posts": []}

            current_time = datetime.now()

            if remove:
                if user_daily_posts[user_id][network][city]["posts"]:
                    deleted_post = user_daily_posts[user_id][network][city]["posts"].pop()
                    user_daily_posts[user_id][network][city]["deleted_posts"].append(deleted_post)
                    print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")
            else:
                user_daily_posts[user_id][network][city]["posts"].append(current_time)
                print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

            save_data()
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['my_stats'])
def show_user_statistics(message):
    if message.chat.type != "private":
        return

    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )
        if stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_paid(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É, –≤–∫–ª—é—á–∞—è '–í—Å–µ —Å–µ—Ç–∏'."""
    if isinstance(user_id, str):
        user_id = int(user_id)

    if user_id not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    for entry in paid_users[user_id]:
        if entry["city"] != city:
            continue

        if entry["network"] == "–í—Å–µ —Å–µ—Ç–∏" or entry["network"] == network:
            end_date = entry["end_date"]

            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except ValueError:
                    print(f"[WARN] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {entry['end_date']}")
                    continue

            if isinstance(end_date, datetime) and datetime.now() < end_date:
                print(f"[DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: {entry}")
                return True
            else:
                print(f"[DEBUG] –°—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫: {entry}")

    print(f"[DEBUG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ {network}, {city}")
    return False

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, " –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–∞.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ", callback_data="admin_add_paid_user"))
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö", callback_data="admin_list_paid_users"))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_duration"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"))
    markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_statistics"))
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_callback(call):
    try:
        if call.data == "admin_add_paid_user":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(call.message, process_user_id_for_payment)
        elif call.data == "admin_list_paid_users":
            show_paid_users(call.message)
        elif call.data == "admin_change_duration":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:")
            bot.register_next_step_handler(call.message, select_user_for_duration_change)
        elif call.data == "admin_add_admin":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            bot.register_next_step_handler(call.message, add_admin_step)
        elif call.data == "admin_statistics":
            show_statistics(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def process_user_id_for_payment(message):
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_network_for_payment(message, user_id):
    if message.text == "–ù–∞–∑–∞–¥":
        admin_panel(message)
        return

    network = message.text
    if network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        else:
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
    else:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_city_for_payment(message, user_id, network):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
        return

    city = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü")
    bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin_step(message):
    try:
        new_admin_id = int(message.text)
        admins.append(new_admin_id)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
def show_paid_users(message):
    if not paid_users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return

    response = "–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, entries in paid_users.items():
        try:
            user_info = bot.get_chat(user_id)
            user_name = get_user_name(user_info)
        except Exception:
            user_name = f"(ID: {user_id})"
        
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}:\n"
        for entry in entries:
            end_date = entry["end_date"]
            if isinstance(end_date, str):
                end_date = datetime.fromisoformat(end_date)
            response += f" - –°–µ—Ç—å: {entry['network']}, –ì–æ—Ä–æ–¥: {entry['city']}, " + \
                       f"–°—Ä–æ–∫: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
    
    bot.send_message(message.chat.id, response)

def get_all_cities_for_network(network):
    if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
        return list(chat_ids_mk.keys())
    elif network == "–ü–ê–†–ù–ò 18+":
        return list(chat_ids_parni.keys())
    elif network == "–ù–°":
        return list(chat_ids_ns.keys())
    elif network == "–í—Å–µ —Å–µ—Ç–∏":
        return list(set(chat_ids_mk.keys()) | set(chat_ids_parni.keys()) | set(chat_ids_ns.keys()))
    return []

def handle_duration_change(call):
    try:
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        for entry in paid_users[user_id]:
            end_date = entry["end_date"]
            if isinstance(end_date, str):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
                end_date = datetime.fromisoformat(end_date)
            entry["end_date"] = end_date + timedelta(days=days)

        save_data()
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")

def show_statistics(message):
    if not user_statistics:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, stats in user_statistics.items():
        user_info = bot.get_chat(user_id)
        user_name = get_user_name(user_info)
        response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: {stats['count']} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
    bot.send_message(message.chat.id, response)

def get_admin_statistics():
    statistics = {}

    for user_id, networks in user_daily_posts.items():
        stats = {"published": 0, "remaining": 0, "details": {}, "links": []}
        limit_total = 0

        for network, cities in networks.items():
            stats["details"][network] = {}
            for city, post_data in cities.items():
                active_posts = len(post_data.get("posts", []))
                deleted_posts = len(post_data.get("deleted_posts", []))
                total_posts = active_posts + deleted_posts

                limit_total += 3  # –ö–∞–∂–¥–∞—è —Å–≤—è–∑–∫–∞ = –ª–∏–º–∏—Ç 3

                stats["details"][network][city] = {
                    "published": total_posts,
                    "remaining": max(0, 3 - total_posts)
                }

                stats["published"] += total_posts

                # –î–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                for post in post_data.get("posts", []):
                    if isinstance(post, datetime) and is_today(post):
                        for user_post in user_posts.get(user_id, []):
                            if user_post["network"] == network and user_post["city"] == city:
                                stats.setdefault("links", []).append(
                                    f"https://t.me/c/{str(user_post['chat_id'])[4:]}/{user_post['message_id']}"
                                )

        stats["remaining"] = max(0, limit_total - stats["published"])
        statistics[user_id] = stats

    print(f"[DEBUG] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {statistics}")
    return statistics

@bot.message_handler(commands=['statistics'])
def show_statistics(message):
    if message.chat.id not in admins:
        return

    stats = get_admin_statistics()
    if not stats:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n"
    for user_id, user_stats in stats.items():
        response += (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å: {user_stats['remaining']}\n"
            f"  - –°—Å—ã–ª–∫–∏: {', '.join(user_stats['links'])}\n"
        )
        if user_stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in user_stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
    bot.send_message(message.chat.id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_user_for_duration_change(message):
    try:
        user_id = int(message.text)
        if user_id not in paid_users:
            bot.send_message(message.chat.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("+1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_1"))
        markup.add(types.InlineKeyboardButton("+1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_7"))
        markup.add(types.InlineKeyboardButton("+1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_30"))
        markup.add(types.InlineKeyboardButton("-1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_-1"))
        markup.add(types.InlineKeyboardButton("-1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_-7"))
        markup.add(types.InlineKeyboardButton("-1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_-30"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_duration_"))
def handle_duration_change(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for entry in paid_users[user_id]:
            end_date = entry["end_date"]
            if isinstance(end_date, str):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
                end_date = datetime.fromisoformat(end_date)
            entry["end_date"] = end_date + timedelta(days=days)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def create_new_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_text)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_delete_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for post in user_posts[message.chat.id]:
            time_formatted = format_time(post["time"])
            button_text = f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}"
            markup.add(button_text)
        markup.add("–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def handle_delete_all_posts(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_all_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

def process_delete_choice(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    else:
        try:
            for post in user_posts[message.chat.id]:
                time_formatted = format_time(post["time"])
                if message.text == f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}":
                    try:
                        bot.delete_message(post["chat_id"], post["message_id"])
                    except Exception:
                        pass
                    user_posts[message.chat.id].remove(post)
                    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_keyboard())
                    return
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

def process_delete_all_choice(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        for post in user_posts[message.chat.id]:
            try:
                bot.delete_message(post["chat_id"], post["message_id"])
            except Exception:
                pass
        user_posts[message.chat.id] = []
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

def process_text(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    if message.photo or message.video:
        if message.photo:
            media_type = "photo"
            file_id = message.photo[-1].file_id
            text = message.caption if message.caption else ""
        elif message.video:
            media_type = "video"
            file_id = message.video.file_id
            text = message.caption if message.caption else ""
    elif message.text:
        media_type = None
        file_id = None
        text = message.text
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        bot.register_next_step_handler(message, process_text)
        return

    confirm_text(message, text, media_type, file_id)

def confirm_text(message, text, media_type=None, file_id=None):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def handle_confirmation(message, text, media_type, file_id):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def get_network_markup():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏", "–ù–∞–∑–∞–¥")
    return markup

def select_network(message, text, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
        return

    selected_network = message.text
    if selected_network in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif selected_network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif selected_network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        elif selected_network == "–í—Å–µ —Å–µ—Ç–∏":
            cities = list(set(list(chat_ids_mk.keys()) + list(chat_ids_parni.keys()) + list(chat_ids_ns.keys())))
        for city in cities:
            markup.add(city)
        markup.add("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å':", reply_markup=markup)
        bot.register_next_step_handler(message, select_city_and_publish, text, selected_network, media_type, file_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, process_text)

def select_city_and_publish(message, text, selected_network, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    city = message.text
    if city == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    user_id = message.from_user.id
    user_name = get_user_name(message.from_user)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—Ç—ã
    if is_user_paid(user_id, selected_network, city):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã –≤–º–µ—Å—Ç–æ VIP
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        full_text = f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name}:\n\n{text}\n\n{signature}"
        networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"] if selected_network == "–í—Å–µ —Å–µ—Ç–∏" else [selected_network]

        for network in networks:
            if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
                chat_dict = chat_ids_mk
            elif network == "–ü–ê–†–ù–ò 18+":
                chat_dict = chat_ids_parni
            elif network == "–ù–°":
                chat_dict = chat_ids_ns
            else:
                continue

            # –ï—Å–ª–∏ —Å–µ—Ç—å –ù–°, –¥–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if network == "–ù–°":
                if city not in chat_dict and city in ns_city_substitution:
                    substitute_city = ns_city_substitution[city]
                    if substitute_city in chat_dict:
                        chat_id = chat_dict[substitute_city]
                    else:
                        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
                        continue
                elif city in chat_dict:
                    chat_id = chat_dict[city]
                else:
                    bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
                    continue
            else:
                if city in chat_dict:
                    chat_id = chat_dict[city]
                else:
                    bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ ¬´{network}¬ª.")
                    continue

            try:
                if media_type == "photo":
                    sent_message = bot.send_photo(chat_id, file_id, caption=full_text, parse_mode="Markdown")
                elif media_type == "video":
                    sent_message = bot.send_video(chat_id, file_id, caption=full_text, parse_mode="Markdown")
                else:
                    sent_message = bot.send_message(chat_id, full_text, parse_mode="Markdown")

                if message.chat.id not in user_posts:
                    user_posts[message.chat.id] = []
                user_posts[message.chat.id].append({
                    "message_id": sent_message.message_id,
                    "chat_id": chat_id,
                    "time": datetime.now(),
                    "city": city,
                    "network": network
                })
                bot.send_message(message.chat.id, f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–∏ ¬´{network}¬ª, –≥–æ—Ä–æ–¥–µ {city}.")
            except telebot.apihelper.ApiTelegramException as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e.description}")

        ask_for_new_post(message)

    else:
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç—ã –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", url="https://t.me/FAQMKBOT" if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±" else "https://t.me/FAQZNAKBOT"))
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–π —Å–µ—Ç–∏/–≥–æ—Ä–æ–¥–µ.", reply_markup=markup)

def ask_for_new_post(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_new_post_choice)

def handle_new_post_choice(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üôå\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats_button(message):
    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )
        if stats["details"]:
            response += "\nüìç –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    response += f"  ‚îî {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
