import logging
import asyncio
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
import os

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot init
BOT_TOKEN = os.getenv("BOT_TOKEN") or "–¢–£–¢_–¢–í–û–ô_–¢–û–ö–ï–ù"  # <-- –ù–ï –ó–ê–ë–£–î–¨ –£–ö–ê–ó–ê–¢–¨ –¢–û–ö–ï–ù
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# Flask app
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    json_data = request.get_json(force=True)
    logger.info("üì© –ü—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç: %s", json_data)

    try:
        update = types.Update(**json_data)
        asyncio.run(dp.process_update(update))
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: %s", e)

    return "OK", 200

@app.route("/", methods=["GET"])
def root():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç webhook!", 200

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
@dp.message()
async def handle_message(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤!")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    WEBHOOK_URL = os.getenv("WEBHOOK_URL") or "https://postgoldbot.onrender.com/webhook"
    asyncio.run(bot.set_webhook(WEBHOOK_URL))
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app.run(host="0.0.0.0", port=10000)
