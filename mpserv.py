import os
import time
import sqlite3
import threading
from datetime import datetime, timedelta
from collections import defaultdict
import threading
import shutil
import re
import html
from urllib.parse import quote

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

ATTEMPTS_PER_PAGE = 10
POSTS_PER_PAGE = 10

import pytz
from pytz import timezone

def now_ekb():
    return datetime.now(timezone('Asia/Yekaterinburg'))

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

from flask import Flask, request, Response

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_md(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

def escape_html(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML.
    """
    if not isinstance(text, str):
        text = str(text)
    return html.escape(text)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# ADMIN ID (–≤–∞—à ID)
ADMIN_CHAT_ID = 479938867  # –í–∞—à ID

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
paid_users = {}
user_posts = {}
user_daily_posts = {}
user_statistics = {}
admins = []
db_lock = threading.Lock()
user_failed_attempts = {}

# üîí –í–µ—á–Ω—ã–µ (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ) –∞–¥–º–∏–Ω—ã
CORE_ADMINS = [479938867, 7235010425]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cur.execute("""
                CREATE TABLE IF NOT EXISTS paid_users (
                    user_id INTEGER,
                    network TEXT,
                    city TEXT,
                    end_date TEXT
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS admin_users (
                    user_id INTEGER PRIMARY KEY
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_posts (
                    user_id INTEGER,
                    network TEXT,
                    city TEXT,
                    time TEXT,
                    chat_id INTEGER,
                    message_id INTEGER,
                    deleted INTEGER DEFAULT 0
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            cur.execute("""
                CREATE TABLE IF NOT EXISTS failed_attempts (
                    user_id INTEGER,
                    network TEXT,
                    city TEXT,
                    time TEXT,
                    reason TEXT
                )
            """)

            # ‚ö†Ô∏è –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞, –¥–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É deleted –≤—Ä—É—á–Ω—É—é (–º–∏–≥—Ä–∞—Ü–∏—è)
            try:
                cur.execute("ALTER TABLE user_posts ADD COLUMN deleted INTEGER DEFAULT 0")
            except sqlite3.OperationalError:
                pass  # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤
            cur.execute("""
                CREATE TABLE IF NOT EXISTS post_history (
                    user_id INTEGER,
                    user_name TEXT,
                    network TEXT,
                    city TEXT,
                    time TEXT,
                    chat_id INTEGER,
                    message_id INTEGER,
                    deleted INTEGER DEFAULT 0,
                    deleted_by INTEGER
                )
            """)

            conn.commit()

def log_failed_attempt(user_id, network, city, reason):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî –∏ –≤ –ø–∞–º—è—Ç—å, –∏ –≤ –±–∞–∑—É."""

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    if user_id not in user_failed_attempts:
        user_failed_attempts[user_id] = []

    user_failed_attempts[user_id].append({
        "network": network,
        "city": city,
        "time": now_ekb(),
        "reason": reason
    })

    # üß± –ò –¥—É–±–ª–∏—Ä—É–µ–º –≤ –ë–î –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    try:
        with db_lock:
            with sqlite3.connect("bot_data.db") as conn:
                cur = conn.cursor()
                cur.execute("""
                    INSERT INTO failed_attempts (user_id, network, city, time, reason)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, network, city, now_ekb().isoformat(), reason))
                conn.commit()
        print(f"[FAILED] {user_id}, {repr(network)}, {repr(city)}, {repr(reason)}")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {e}")

def add_post_to_history(user_id, user_name, network, city, chat_id, message_id, deleted=False, deleted_by=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü—É post_history.
    """
    post_time = now_ekb()
    post_data = {
        "user_id": user_id,
        "user_name": user_name,
        "network": network,
        "city": city,
        "time": post_time,
        "chat_id": chat_id,
        "message_id": message_id,
        "deleted": deleted,
        "deleted_by": deleted_by
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ post_history
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO post_history (user_id, user_name, network, city, time, chat_id, message_id, deleted, deleted_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                post_data["user_id"],
                post_data["user_name"],
                post_data["network"],
                post_data["city"],
                post_data["time"].isoformat(),
                post_data["chat_id"],
                post_data["message_id"],
                int(post_data["deleted"]),
                post_data["deleted_by"]
            ))
            conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_data():
    with db_lock:
        try:
            with sqlite3.connect("bot_data.db") as conn:
                cur = conn.cursor()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cur.execute("SELECT user_id, network, city, end_date FROM paid_users")
                local_paid_users = {}
                for user_id, network, city, end_date in cur.fetchall():
                    if user_id not in local_paid_users:
                        local_paid_users[user_id] = []
                    try:
                        parsed_date = datetime.fromisoformat(end_date)
                    except:
                        parsed_date = None
                    local_paid_users[user_id].append({
                        "network": network,
                        "city": city,
                        "end_date": parsed_date
                    })

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
                cur.execute("SELECT user_id FROM admin_users")
                local_admins = [row[0] for row in cur.fetchall()]

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã
                cur.execute("SELECT user_id, network, city, time, chat_id, message_id, deleted FROM user_posts")
                local_user_posts = {}
                for user_id, network, city, time_str, chat_id, message_id, deleted in cur.fetchall():
                    if user_id not in local_user_posts:
                        local_user_posts[user_id] = []
                    try:
                        post_time = datetime.fromisoformat(time_str)
                    except:
                        post_time = now_ekb()
                    local_user_posts[user_id].append({
                        "message_id": message_id,
                        "chat_id": chat_id,
                        "time": post_time,
                        "city": city,
                        "network": network,
                        "deleted": bool(deleted)
                    })

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                cur.execute("SELECT user_id, network, city, time, reason FROM failed_attempts")
                local_failed_attempts = {}
                for user_id, network, city, time_str, reason in cur.fetchall():
                    try:
                        attempt_time = datetime.fromisoformat(time_str)
                    except:
                        attempt_time = now_ekb()
                    if user_id not in local_failed_attempts:
                        local_failed_attempts[user_id] = []
                    local_failed_attempts[user_id].append({
                        "network": network,
                        "city": city,
                        "time": attempt_time,
                        "reason": reason
                    })

                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                global paid_users, admins, user_posts, user_failed_attempts, user_daily_posts
                paid_users = local_paid_users
                admins = local_admins
                user_posts = local_user_posts
                user_failed_attempts = local_failed_attempts

                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ user_daily_posts
                from collections import defaultdict
                user_daily_posts = {}

                source_posts = user_posts if user_posts else {}

                # –ï—Å–ª–∏ user_posts –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–æ—Å—Ç—ã –∏–∑ post_history
                if not source_posts:
                    print("[‚ÑπÔ∏è] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_daily_posts –∏–∑ post_history")
                    cur.execute("SELECT user_id, network, city, time, deleted FROM post_history")
                    for user_id, network, city, time_str, deleted in cur.fetchall():
                        try:
                            post_time = datetime.fromisoformat(time_str)
                        except:
                            continue

                        if post_time.date() != now_ekb().date():
                            continue

                        if user_id not in source_posts:
                            source_posts[user_id] = []

                        source_posts[user_id].append({
                            "network": network,
                            "city": city,
                            "time": post_time,
                            "deleted": bool(deleted)
                        })

                # –°–±–æ—Ä–∫–∞ user_daily_posts
                for user_id, posts in source_posts.items():
                    for post in posts:
                        network = post["network"]
                        city = post["city"]
                        time = post["time"]
                        is_deleted = post.get("deleted", False)

                        if isinstance(time, str):
                            try:
                                time = datetime.fromisoformat(time)
                            except:
                                continue

                        if time.date() != now_ekb().date():
                            continue

                        if user_id not in user_daily_posts:
                            user_daily_posts[user_id] = defaultdict(lambda: defaultdict(lambda: {
                                "posts": [],
                                "deleted_posts": [],
                                "last_post_time": None
                            }))

                        user_daily_posts[user_id][network][city]["last_post_time"] = time

                        if is_deleted:
                            user_daily_posts[user_id][network][city]["deleted_posts"].append(time)
                        else:
                            user_daily_posts[user_id][network][city]["posts"].append(time)

                return paid_users, admins, user_posts

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")
            return {}, [], {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
paid_users, admins, user_posts = load_data()

# üß† –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è all_cities –Ω–∞ –æ—Å–Ω–æ–≤–µ chat_ids_* –∏ —É—á—ë—Ç–∞ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤

# –°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞—Ä–∏:
chat_ids_mk = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002210043742,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002238514762,
    "–ü–µ—Ä–º—å": -1002205127231,
    "–ò–∂–µ–≤—Å–∫": -1001604781452,
    "–ö–∞–∑–∞–Ω—å": -1002228881675,
    "–û—Ä–µ–Ω–±—É—Ä–≥": -1002255568202,
    "–£—Ñ–∞": -1002196469365,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002235645677,
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": -1002248474008,
    "–ë–∞—Ä–Ω–∞—É–ª": -1002234471215,
    "–û–º—Å–∫": -1002151258573,
    "–°–∞—Ä–∞—Ç–æ–≤": -1002426762134,
    "–í–æ—Ä–æ–Ω–µ–∂": -1002207503508,
    "–°–∞–º–∞—Ä–∞": -1001852671383,
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": -1002167762598,
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": -1001631628911,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": -1002217056197,
    "–ò—Ä–∫—É—Ç—Å–∫": -1002210419274,
    "–ö–µ–º–µ—Ä–æ–≤–æ": -1002147522863,
    "–ú–æ—Å–∫–≤–∞": -1002208434096,
    "–°–∞–Ω–∫—Ç –ü–µ—Ç–µ—Ä–±—É—Ä–≥": -1002485776859,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –Æ–≥–∞": -1001814693664,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞": -1002161346845,
    "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä": -1002210623988,
    "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ üõ†Ô∏è": -1002426733876
}

chat_ids_parni = {
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": -1002413948841,
    "–¢—é–º–µ–Ω—å": -1002255622479,
    "–û–º—Å–∫": -1002274367832,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002406302365,
    "–ü–µ—Ä–º–∏": -1002280860973,
    "–ö—É—Ä–≥–∞–Ω": -1002469285352,
    "–•–ú–ê–û": -1002287709568,
    "–£—Ñ–∞": -1002448909000,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1002261777025,
    "–Ø–ú–ê–û": -1002371438340
}

chat_ids_ns = {
    "–ö—É—Ä–≥–∞–Ω": -1001465465654,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": -1001824149334,
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": -1002233108474,
    "–ü–µ—Ä–º—å": -1001753881279,
    "–£—Ñ–∞": -1001823390636,
    "–Ø–º–∞–ª": -1002145851794,
    "–ú–æ—Å–∫–≤–∞": -1001938448310,
    "–•–ú–ê–û": -1001442597049,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66": -1002169473861,
    "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74": -1002193127380
}

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ü–µ—Ä–º–∏/–ü–µ—Ä–º—å, –Ø–ú–ê–û/–Ø–º–∞–ª –∏ –ø—Ä.)
def normalize_city_name(name):
    mapping = {
        "–ü–µ—Ä–º–∏": "–ü–µ—Ä–º—å",
        "–Ø–ú–ê–û": "–Ø–º–∞–ª",
        "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
        "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74": "–ß–µ–ª—è–±–∏–Ω—Å–∫"
    }
    return mapping.get(name, name)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ all_cities
all_cities = {}

def insert_to_all(city, net, real_name, chat_id):
    norm = normalize_city_name(city)
    if norm not in all_cities:
        all_cities[norm] = {}
    if net not in all_cities[norm]:
        all_cities[norm][net] = []
    all_cities[norm][net].append({"name": real_name, "chat_id": chat_id})

for city, chat_id in chat_ids_mk.items():
    insert_to_all(city, "mk", city, chat_id)

for city, chat_id in chat_ids_parni.items():
    insert_to_all(city, "parni", city, chat_id)

for city, chat_id in chat_ids_ns.items():
    insert_to_all(city, "ns", city, chat_id)

# –î–æ–±–∞–≤–∏–º fallback-–≥—Ä—É–ø–ø—É –ú–ö –¥–ª—è –¢—é–º–µ–Ω–∏, –Ø–º–∞–ª–∞ –∏ –•–ú–ê–û –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
fallback_mk = {"–¢—é–º–µ–Ω—å", "–Ø–º–∞–ª", "–•–ú–ê–û"}
for city in fallback_mk:
    if "mk" not in all_cities.get(city, {}):
        insert_to_all(city, "mk", "–û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –¢—é–º–µ–Ω—å –∏ –°–µ–≤–µ—Ä", -1002210623988)

# –ò—Ç–æ–≥: all_cities –≥–æ—Ç–æ–≤
print(f"üì¶ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(all_cities)} –≥–æ—Ä–æ–¥–æ–≤")

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
network_signatures = {
    "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±": "Ô∏è üï∏Ô∏è–†–µ–∫–ª–∞–º–∞. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–µ–π —Å–µ—Ç–∏ –ú–ö.",
    "–ü–ê–†–ù–ò 18+": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´",
    "–ù–°": "üü•üü¶üü©üü®üüßüü™‚¨õÔ∏è‚¨úÔ∏èüü´"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return markup

def format_time(timestamp):
    tz = pytz.timezone('Asia/Yekaterinburg')
    local_time = timestamp.astimezone(tz)
    return local_time.strftime("%H:%M, %d %B %Y")

def format_time(dt):
    if isinstance(dt, str):
        try:
            dt = datetime.fromisoformat(dt)
        except:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return dt.strftime("%d.%m.%Y %H:%M")

def get_user_name(user):
    name = escape_md(user.first_name)
    if user.username:
        return f"[{name}](https://t.me/{user.username})"
    else:
        return f"[{name}](tg://user?id={user.id})"

def add_paid_user(user_id, network, city, end_date):
    with db_lock:  
        if user_id not in paid_users:
            paid_users[user_id] = []
        paid_users[user_id].append({
            "network": network,
            "city": city,
            "end_date": end_date
        })
        save_data()

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")
    bot.send_message(user_id, f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {end_date.strftime('%Y-%m-%d')}.")

def add_admin_user(user_id):
    with db_lock:
        if user_id not in admins:
            admins.append(user_id)
            save_data()

    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    bot.send_message(user_id, "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

def load_admin_users():
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM admin_users")
            admin_users = [row[0] for row in cur.fetchall()]
            return admin_users  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def add_admin_user(user_id):
    with db_lock:
        with sqlite3.connect("bot_data.db") as conn:
            cur = conn.cursor()
            cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (user_id,))
            conn.commit()

def is_admin(user_id):
    admin_users = load_admin_users()
    return user_id in admin_users or user_id in CORE_ADMINS

@bot.message_handler(commands=["backup"])
def handle_backup(message):
    if not is_admin(message.from_user.id):
        return
    try:
        save_data()  # üíæ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        with open("bot_data.db", "rb") as f:
            bot.send_document(message.chat.id, f, caption="üì¶ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø: {e}")

@bot.message_handler(commands=["restore"])
def handle_restore_command(message):
    if not is_admin(message.from_user.id):
        return
    bot.send_message(message.chat.id, "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª `bot_data.db` –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
    bot.register_next_step_handler(message, handle_restore_file)

def handle_restore_file(message):
    if not message.document:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `bot_data.db`.")
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open("bot_data.db", "wb") as f:
            f.write(downloaded_file)

        load_data()
        bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

@bot.message_handler(commands=["debug_users"])
def handle_debug_users(message):
    if not is_admin(message.from_user.id):
        return

    if not paid_users:
        bot.send_message(message.chat.id, "‚ö†Ô∏è paid_users –ø—É—Å—Ç.")
        return

    text = f"üß† –í –ø–∞–º—è—Ç–∏ {len(paid_users)} –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö:\n"
    for uid, entries in paid_users.items():
        text += f"\nüë§ ID: {uid}"
        for e in entries:
            end = e['end_date']
            text += f"\n‚Ä¢ {e['network']} | {e['city']} ‚Üí {end}"
    bot.send_message(message.chat.id, text)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π "—Å–µ—Ç—å + –≥–æ—Ä–æ–¥"
def count_unique_networks_cities(user_id):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–µ—Ç–µ–π –∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_daily_posts:
        return 0

    unique_combinations = set()
    for network, cities in user_daily_posts[user_id].items():
        for city in cities:
            unique_combinations.add((network, city))

    return len(unique_combinations)

def is_new_day(last_post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å."""
    if last_post_time is None:
        return True
    return last_post_time.date() < now_ekb().date()

def is_today(post_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è."""
    return post_time.date() == now_ekb().date()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_duration_for_payment(message, user_id, network, city):
    if message.text == "–ù–∞–∑–∞–¥":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        if network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
            cities = list(chat_ids_mk.keys())
        elif network == "–ü–ê–†–ù–ò 18+":
            cities = list(chat_ids_parni.keys())
        elif network == "–ù–°":
            cities = list(chat_ids_ns.keys())
        markup.add(*cities)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
        return

    duration = message.text
    if duration == "–î–µ–Ω—å":
        days = 1
    elif duration == "–ù–µ–¥–µ–ª—è":
        days = 7
    elif duration == "–ú–µ—Å—è—Ü":
        days = 30
    else:
        bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
        bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))
        return

    expiry_date = now_ekb() + timedelta(days=days)

    if user_id not in paid_users:
        paid_users[user_id] = []

    paid_users[user_id].append({
        "end_date": expiry_date.isoformat(),
        "network": network,
        "city": city
    })
    save_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    try:
        user_info = bot.get_chat(user_id)
        user_name = f"{user_info.first_name or ''} {user_info.last_name or ''}".strip()
        if not user_name:
            user_name = user_info.username or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    except Exception as e:
        user_name = "–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∏–≤—à–µ–º—É –∞–¥–º–∏–Ω—É
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω.\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date.strftime('%d.%m.%Y')}"
        )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    bot.send_message(
        ADMIN_CHAT_ID,
        f"üë®‚Äçüíº {get_user_name(message.from_user)} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}) –≤ —Å–µ—Ç—å ¬´{network}¬ª, –≥–æ—Ä–æ–¥ {city} –Ω–∞ {days} –¥–Ω.\nüìÖ –î–æ: {expiry_date.strftime('%d.%m.%Y')}"
    )

def get_user_statistics(user_id):
    stats = {"published": 0, "remaining": 0, "details": {}}
    limit_total = 0

    active_access = []
    for access in paid_users.get(user_id, []):
        end_date = access.get("end_date")
        if isinstance(end_date, str):
            try:
                end_date = datetime.fromisoformat(end_date)
            except:
                end_date = None

        if end_date and end_date >= now_ekb():
            if access["network"] == "–í—Å–µ —Å–µ—Ç–∏":
                for net in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"]:
                    active_access.append((net, access["city"]))
            else:
                active_access.append((access["network"], access["city"]))

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ "–í—Å–µ —Å–µ—Ç–∏" –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫ —Å–µ—Ç–∏
    active_access = list(set(active_access))

    for network, city in active_access:
        total_posts = 0
        if user_id in user_daily_posts and network in user_daily_posts[user_id] and city in user_daily_posts[user_id][network]:
            post_data = user_daily_posts[user_id][network][city]
            active_posts = len([p for p in post_data.get("posts", []) if is_today(p)])
            deleted_posts = len([p for p in post_data.get("deleted_posts", []) if is_today(p)])
            total_posts = active_posts + deleted_posts

        limit_total += 3
        if network not in stats["details"]:
            stats["details"][network] = {}

        stats["details"][network][city] = {
            "published": total_posts,
            "remaining": max(0, 3 - total_posts)
        }
        stats["published"] += total_posts

    stats["remaining"] = max(0, limit_total - stats["published"])
    return stats

def is_today(timestamp):
    now = now_ekb()
    try:
        parsed_time = datetime.fromisoformat(timestamp) if isinstance(timestamp, str) else timestamp
        return parsed_time.date() == now_ekb().date()
    except:
        return False

from datetime import datetime
import pytz

def now_ekb():
    return datetime.now(pytz.timezone('Asia/Yekaterinburg'))

def get_admin_statistics():
    statistics = {}

    for user_id, networks in user_daily_posts.items():
        stats = {
            "published": 0,
            "remaining": 0,
            "details": {},
            "links": []
        }
        limit_total = 0
        links = set()
        today = now_ekb().date()

        for network, cities in networks.items():
            stats["details"][network] = {}

            for city, post_data in cities.items():
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ—Å—Ç—ã
                today_posts = [p for p in post_data.get("posts", []) if isinstance(p, datetime) and p.date() == today]
                today_deleted = [p for p in post_data.get("deleted_posts", []) if isinstance(p, datetime) and p.date() == today]

                total_posts = len(today_posts) + len(today_deleted)
                limit_total += 3

                stats["details"][network][city] = {
                    "published": total_posts,
                    "remaining": max(0, 3 - total_posts)
                }

                stats["published"] += total_posts

                # –°—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ—Å—Ç—ã
                for user_post in user_posts.get(user_id, []):
                    if (
                        user_post["network"] == network and
                        user_post["city"] == city and
                        isinstance(user_post.get("time"), datetime) and
                        user_post["time"].astimezone(pytz.timezone('Asia/Yekaterinburg')).date() == today
                    ):
                        link = f"https://t.me/c/{str(user_post['chat_id'])[4:]}/{user_post['message_id']}"
                        links.add(link)

        stats["remaining"] = max(0, limit_total - stats["published"])
        stats["links"] = list(links)
        statistics[user_id] = stats

    return statistics

def check_payment(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É (—Å —É—á–µ—Ç–æ–º all_cities –∏ –ù–°)."""
    user_id = str(user_id)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if user_id not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Å–µ—Ç–∏
    net_map = {"–ú—É–∂—Å–∫–æ–π –ö–ª—É–±": "mk", "–ü–ê–†–ù–ò 18+": "parni", "–ù–°": "ns"}
    net_key = net_map.get(network)

    for payment in paid_users[user_id]:
        expiry = payment.get("end_date")
        if isinstance(expiry, str):
            try:
                expiry = datetime.fromisoformat(expiry)
            except:
                continue

        if not isinstance(expiry, datetime) or expiry < now_ekb():
            print(f"[DEBUG] –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫ —É {user_id}: {payment}")
            continue

        # ‚úÖ –í—Å–µ —Å–µ—Ç–∏ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if payment["network"] == "–í—Å–µ —Å–µ—Ç–∏" and payment["city"] == city:
            print(f"[DEBUG] ‚úÖ –í—Å–µ —Å–µ—Ç–∏: –¥–æ—Å—Ç—É–ø –≤ {network} / {city}")
            return True

        # ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–µ—Ç—å –∏ –≥–æ—Ä–æ–¥
        if payment["network"] == network and payment["city"] == city:
            print(f"[DEBUG] ‚úÖ –°–µ—Ç—å: {network} / {city}")
            return True

        # ‚úÖ –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –ù–° ‚Äî –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–π –≥–æ—Ä–æ–¥
        if network == "–ù–°" and payment["network"] == "–í—Å–µ —Å–µ—Ç–∏":
            variants = [city, ns_city_substitution.get(city)]
            if payment["city"] in variants:
                print(f"[DEBUG] ‚úÖ –ù–° —á–µ—Ä–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É: {network} / {city}")
                return True

    print(f"[DEBUG] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ —É {user_id} –∫ {network} / {city}")
    return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(retries=3, delay=0.5):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ."""
    if not paid_users and not user_posts:
        print("[‚õî SAVE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: paid_users –∏ user_posts –ø—É—Å—Ç—ã–µ.")
        bot.send_message(
            ADMIN_CHAT_ID,
            "‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (0 –æ–ø–ª–∞—Ç, 0 –ø–æ—Å—Ç–æ–≤).",
        )
        return

    print(f"[üíæ SAVE] –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: {len(paid_users)}, –ü–æ—Å—Ç–æ–≤: {len(user_posts)}, –ê–¥–º–∏–Ω–æ–≤: {len(admins)}")

    for attempt in range(retries):
        with db_lock:
            try:
                with sqlite3.connect("bot_data.db", timeout=5) as conn:
                    cur = conn.cursor()

                    # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
                    cur.execute("DELETE FROM paid_users")
                    cur.execute("DELETE FROM admin_users")
                    cur.execute("DELETE FROM user_posts")
                    cur.execute("DELETE FROM failed_attempts")
                    cur.execute("DELETE FROM post_history")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
                    for user_id, entries in paid_users.items():
                        for entry in entries:
                            end = entry.get("end_date", now_ekb())
                            if isinstance(end, str):
                                try:
                                    end = datetime.fromisoformat(end)
                                except:
                                    end = now_ekb()
                            cur.execute("""
                                INSERT INTO paid_users (user_id, network, city, end_date)
                                VALUES (?, ?, ?, ?)
                            """, (user_id, entry["network"], entry["city"], end.isoformat()))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                    for user_id in admins:
                        cur.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (user_id,))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã
                    for user_id, posts in user_posts.items():
                        for post in posts:
                            cur.execute("""
                                INSERT INTO user_posts (user_id, network, city, time, chat_id, message_id, deleted)
                                VALUES (?, ?, ?, ?, ?, ?, ?)
                            """, (
                                user_id,
                                post["network"],
                                post["city"],
                                post["time"],
                                post["chat_id"],
                                post["message_id"],
                                int(post.get("deleted", False))
                            ))

                            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ post_history
                            cur.execute("""
                                INSERT INTO post_history (user_id, user_name, network, city, time, chat_id, message_id, deleted, deleted_by)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                            """, (
                                user_id,
                                post.get("user_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
                                post["network"],
                                post["city"],
                                post["time"],
                                post["chat_id"],
                                post["message_id"],
                                int(post.get("deleted", False)),
                                post.get("deleted_by", None)
                            ))

                    # –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                    for user_id, attempts in user_failed_attempts.items():
                        for attempt in attempts:
                            cur.execute("""
                                INSERT INTO failed_attempts (user_id, network, city, time, reason)
                                VALUES (?, ?, ?, ?, ?)
                            """, (
                                user_id,
                                attempt["network"],
                                attempt["city"],
                                attempt["time"].isoformat(),
                                attempt["reason"]
                            ))

                    conn.commit()
                    print("[‚úÖ SAVE] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ bot_data.db")

                    bot.send_message(
                        ADMIN_CHAT_ID,
                        f"‚úÖ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É:*\nüë§ –û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: *{len(paid_users)}*\nüì¨ –ü–æ—Å—Ç–æ–≤: *{len(user_posts)}*\nüëÆ –ê–¥–º–∏–Ω–æ–≤: *{len(admins)}*",
                        parse_mode="Markdown"
                    )
                    return

            except sqlite3.OperationalError as e:
                if "database is locked" in str(e).lower():
                    print("[‚è≥ SAVE] –ë–∞–∑–∞ –∑–∞–Ω—è—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                    time.sleep(delay)
                    continue
                else:
                    print(f"[‚ùå SAVE] SQLite –æ—à–∏–±–∫–∞: {e}")
                    break

            except Exception as ex:
                print(f"[‚ùå SAVE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex}")
                break

@bot.message_handler(commands=['start'])
def start(message):
    try:
        if message.chat.type != "private":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        if message.chat.id not in user_posts:
            user_posts[message.chat.id] = []

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø PostGoldBot. üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

from collections import defaultdict

def check_daily_limit(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_daily_posts:
        user_daily_posts[user_id] = defaultdict(lambda: defaultdict(lambda: {
            "posts": [],
            "deleted_posts": [],
            "last_post_time": None
        }))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if is_new_day(user_daily_posts[user_id][network][city]["last_post_time"]):
        user_daily_posts[user_id][network][city]["posts"] = []
        user_daily_posts[user_id][network][city]["deleted_posts"] = []
        print(f"[DEBUG] –ù–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    active_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["posts"] if is_today(post_time))
    deleted_posts = sum(1 for post_time in user_daily_posts[user_id][network][city]["deleted_posts"] if is_today(post_time))
    total_posts = active_posts + deleted_posts

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    unique_combinations = count_unique_networks_cities(user_id)
    if unique_combinations == 0:
        return False  # –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

    # üîß –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ª–∏–º–∏—Ç–∞: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
    limit = 3 * unique_combinations

    return total_posts < limit


def update_daily_posts(user_id, network, city, remove=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π."""
    with db_lock:
        try:
            if user_id not in user_daily_posts:
                user_daily_posts[user_id] = {}

            if network not in user_daily_posts[user_id]:
                user_daily_posts[user_id][network] = {}

            if city not in user_daily_posts[user_id][network]:
                user_daily_posts[user_id][network][city] = {"posts": [], "deleted_posts": []}

            current_time = now_ekb()

            if remove:
                if user_daily_posts[user_id][network][city]["posts"]:
                    deleted_post = user_daily_posts[user_id][network][city]["posts"].pop()
                    user_daily_posts[user_id][network][city]["deleted_posts"].append(deleted_post)
                    print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")
            else:
                user_daily_posts[user_id][network][city]["posts"].append(current_time)
                print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–µ—Ç–∏ {network}, –≥–æ—Ä–æ–¥–µ {city}.")

            save_data()
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def send_nightly_backup():
    try:
        # ‚õî –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        if len(paid_users) == 0 and len(user_posts) == 0:
            bot.send_message(ADMIN_CHAT_ID, "‚ö†Ô∏è –ù–æ—á–Ω–æ–π –±—ç–∫–∞–ø –æ—Ç–º–µ–Ω—ë–Ω: –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (0 –æ–ø–ª–∞—Ç, 0 –ø–æ—Å—Ç–æ–≤).")
            print("[‚õî BACKUP] –ë–∞–∑–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
            return

        save_data()  # üíæ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        with open("bot_data.db", "rb") as f:
            bot.send_document(ADMIN_CHAT_ID, f, caption="üåô –ù–æ—á–Ω–æ–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print("[‚úÖ BACKUP] –ù–æ—á–Ω–æ–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"[‚ùå BACKUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}")

def schedule_auto_backup():
    def check_and_backup():
        while True:
            now = now_ekb()
            if now.hour == 1 and now.minute == 0:  # 01:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
                send_nightly_backup()
                time.sleep(61)
            else:
                time.sleep(30)
    t = threading.Thread(target=check_and_backup)
    t.daemon = True
    t.start()

@bot.message_handler(commands=['my_stats'])
def show_user_statistics(message):
    if message.chat.type != "private":
        return

    try:
        stats = get_user_statistics(message.from_user.id)
        response = (
            f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['published']}\n"
            f"  - –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['remaining']}\n"
        )
        if stats["details"]:
            response += "  - –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º:\n"
            for network, cities in stats["details"].items():
                for city, data in cities.items():
                    response += f"    - {network}, {city}: {data['published']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {data['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å\n"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_paid(user_id, network, city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ –≥–æ—Ä–æ–¥—É, –≤–∫–ª—é—á–∞—è '–í—Å–µ —Å–µ—Ç–∏'."""
    if isinstance(user_id, str):
        user_id = int(user_id)

    if user_id not in paid_users:
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
        return False

    for entry in paid_users[user_id]:
        if entry["city"] != city:
            continue

        if entry["network"] == "–í—Å–µ —Å–µ—Ç–∏" or entry["network"] == network:
            end_date = entry["end_date"]

            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except ValueError:
                    print(f"[WARN] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {entry['end_date']}")
                    continue

            if isinstance(end_date, datetime) and now_ekb() < end_date:
                print(f"[DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: {entry}")
                return True
            else:
                print(f"[DEBUG] –°—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫: {entry}")

    print(f"[DEBUG] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ {network}, {city}")
    return False

# üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ", callback_data="admin_add_paid_user"))
    markup.add(types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö", callback_data="admin_list_paid_users"))
    markup.add(types.InlineKeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_duration"))
    markup.add(types.InlineKeyboardButton("üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="admin_statistics"))
    markup.add(types.InlineKeyboardButton("üìõ –ü–æ–ø—ã—Ç–∫–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞", callback_data="show_failed_attempts:0"))
    markup.add(types.InlineKeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤", callback_data="admin_post_history:0"))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user_posts"))

    bot.send_message(message.chat.id, "üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*", reply_markup=markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_callback(call):
    try:
        if call.data == "admin_add_paid_user":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler(call.message, process_user_id_for_payment)
        elif call.data == "admin_list_paid_users":
            show_paid_users(call.message)
        elif call.data == "admin_change_duration":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:")
            bot.register_next_step_handler(call.message, select_user_for_duration_change)
        elif call.data == "admin_add_admin":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            bot.register_next_step_handler(call.message, add_admin_step)
        elif call.data == "admin_statistics":
            show_statistics_for_admin(call.message.chat.id)
        elif call.data == "admin_delete_user_posts":
            bot.send_message(call.message.chat.id, "üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
            bot.register_next_step_handler(call.message, delete_user_posts_step)
        elif call.data == "admin_post_history":  # üëà –≠–¢–û –î–û–ë–ê–í–¨
            show_post_history(call)              # üëà –ò –≠–¢–û
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤ admin_callback: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def process_user_id_for_payment(message):
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, "Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
def select_network_for_payment(message, user_id):
    if message.text == "–ù–∞–∑–∞–¥":
        admin_panel(message)
        return

    network = message.text
    if network not in ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]:
        bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å.")
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    network_key = normalize_network_key(network)

    if network == "–í—Å–µ —Å–µ—Ç–∏":
        # –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ —Ö–æ—Ç—è –±—ã 2+ —Å–µ—Ç–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã
        cities = [city for city, data in all_cities.items() if len(data.keys()) >= 2]
    else:
        cities = [city for city, data in all_cities.items() if network_key in data]

    for city in cities:
        markup.add(city)
    markup.add("–ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))

def select_city_for_payment(message, user_id, network):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, lambda m: select_network_for_payment(m, user_id))
        return

    city = message.text
    network_key = normalize_network_key(network)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if network == "–í—Å–µ —Å–µ—Ç–∏":
        allowed_cities = [c for c, d in all_cities.items() if len(d.keys()) >= 2]
    else:
        allowed_cities = [c for c, d in all_cities.items() if network_key in d]

    if city not in allowed_cities:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for c in allowed_cities:
            markup.add(c)
        markup.add("–ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: select_city_for_payment(m, user_id, network))
        return

    # –í—Å—ë –æ–∫ ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü")
    bot.send_message(message.chat.id, "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: select_duration_for_payment(m, user_id, network, city))

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_failed_attempts"))
def show_failed_attempts(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        parts = call.data.split(":")
        page = int(parts[1]) if len(parts) > 1 else 0
    except:
        page = 0

    try:
        with db_lock:
            with sqlite3.connect("bot_data.db") as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT user_id, network, city, time, reason
                    FROM failed_attempts
                    ORDER BY time DESC
                """)
                attempts = cur.fetchall()

        if not attempts:
            bot.answer_callback_query(call.id, "‚úÖ –ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
            return

        start = page * ATTEMPTS_PER_PAGE
        end = start + ATTEMPTS_PER_PAGE
        total_pages = (len(attempts) - 1) // ATTEMPTS_PER_PAGE + 1
        page_attempts = attempts[start:end]

        response = f"<b>üìõ –ü–æ–ø—ã—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ (—Å—Ç—Ä. {page+1} –∏–∑ {total_pages}):</b>\n\n"
        for user_id, network, city, time_str, reason in page_attempts:
            try:
                user = bot.get_chat(user_id)
                name = escape_html(user.first_name)
                user_link = f"<a href='https://t.me/{user.username}'>{name}</a>" if user.username else f"<a href='tg://user?id={user.id}'>{name}</a>"
            except:
                user_link = f"ID: <code>{user_id}</code>"

            try:
                time = datetime.fromisoformat(time_str)
                time_formatted = time.strftime('%d.%m.%Y %H:%M')
            except:
                time_formatted = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            response += (
                f"üë§ {user_link}\n"
                f"üåê –°–µ—Ç—å: <b>{escape_html(network)}</b>, –ì–æ—Ä–æ–¥: <b>{escape_html(city)}</b>\n"
                f"üïê {time_formatted}\n"
                f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: <i>{escape_html(reason)}</i>\n\n"
            )

        # –ö–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–í–ø–µ—Ä—ë–¥¬ª
        keyboard = InlineKeyboardMarkup()
        buttons = []
        if page > 0:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_failed_attempts:{page - 1}"))
        if end < len(attempts):
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"show_failed_attempts:{page + 1}"))
        if buttons:
            keyboard.row(*buttons)

        bot.edit_message_text(response, chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode="HTML", reply_markup=keyboard)
        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫: <code>{escape_html(str(e))}</code>", parse_mode="HTML")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_post_history"))
def show_post_history(call):
    try:
        # üî¢ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        parts = call.data.split(":")
        page = int(parts[1]) if len(parts) > 1 else 0

        with db_lock:
            with sqlite3.connect("bot_data.db") as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT user_id, user_name, network, city, time, chat_id, message_id, deleted, deleted_by
                    FROM post_history
                    ORDER BY time DESC
                """)
                posts = cur.fetchall()

        total_pages = (len(posts) - 1) // POSTS_PER_PAGE + 1
        page_posts = posts[page * POSTS_PER_PAGE: (page + 1) * POSTS_PER_PAGE]

        if not page_posts:
            bot.send_message(call.message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.")
            return

        report = f"<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Å—Ç—Ä. {page + 1} –∏–∑ {total_pages}):</b>\n\n"

        for post in page_posts:
            try:
                user_id, user_name, network, city, time_str, chat_id, message_id, deleted, deleted_by = post

                # üïí –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å –∑–∞—â–∏—Ç–æ–π
                try:
                    time = datetime.fromisoformat(time_str)
                    if time.tzinfo is not None:
                        time = time.replace(tzinfo=None)
                    formatted_time = time.strftime('%d.%m.%Y %H:%M')
                except Exception as time_parse_error:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {time_str} ‚Üí {time_parse_error}")
                    formatted_time = time_str

                # üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç—è–Ω—É—Ç—å –∏–º—è, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                if not user_name or user_name.lower() == "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω":
                    try:
                        user_info = bot.get_chat(user_id)
                        user_name = user_info.first_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    except:
                        user_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è
                user_link = f"<a href='tg://user?id={user_id}'>{escape_html(user_name)}</a> (ID: <code>{user_id}</code>)"
                network = escape_html(network)
                city = escape_html(city)
                chat_id_short = str(chat_id).replace("-100", "")

                # üóë –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                if deleted:
                    deleted_by_display = escape_html(str(deleted_by)) if deleted_by else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    status_line = f"‚ùå <b>–£–¥–∞–ª—ë–Ω:</b> –î–∞ (–∫–µ–º: {deleted_by_display})"
                else:
                    status_line = "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω"

                report += (
                    f"üë§ <b>–Æ–∑–µ—Ä:</b> {user_link}\n"
                    f"üåê <b>–°–µ—Ç—å/–ì—Ä—É–ø–ø–∞:</b> {network} ({city})\n"
                    f"üïí <b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
                    f"{status_line}\n"
                    f"üîó <a href='https://t.me/c/{chat_id_short}/{message_id}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>\n\n"
                )

            except Exception as inner_e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏: {inner_e}")
                report += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏: <code>{escape_html(str(inner_e))}</code>\n\n"

        # üß± –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(report) > 4000:
            report = report[:3900] + "\n\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Ä–µ–∑–∞–Ω—ã, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        # –ö–Ω–æ–ø–∫–∏ ¬´–Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥¬ª
        keyboard = InlineKeyboardMarkup()
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_post_history:{page - 1}"))
        if (page + 1) * POSTS_PER_PAGE < len(posts):
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_post_history:{page + 1}"))
        if nav_buttons:
            keyboard.row(*nav_buttons)

        bot.edit_message_text(report, chat_id=call.message.chat.id, message_id=call.message.message_id,
                              parse_mode="HTML", reply_markup=keyboard)
        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"[ERROR] –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: <code>{escape_html(str(e))}</code>", parse_mode="HTML")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin_step(message):
    try:
        new_admin_id = int(message.text)
        admins.append(new_admin_id)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
def show_paid_users(message):
    if not paid_users:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return

    response = "üìã <b>–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for user_id, entries in paid_users.items():
        try:
            user_info = bot.get_chat(user_id)
            name = escape_html(user_info.first_name or "")
            username = user_info.username
            id_link = f"<a href='tg://user?id={user_id}'>{user_id}</a>"

            if username:
                full_name = f"{name} (@{username})"
            else:
                full_name = f"{name}"

            user_line = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {id_link} | {full_name}"
        except Exception:
            user_line = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>"

        response += f"\n{user_line}\n"

        for entry in entries:
            network = escape_html(entry.get("network"))
            city = escape_html(entry.get("city"))
            net_key = normalize_network_key(entry.get("network"))

            city_names = []
            if all_cities.get(city) and net_key in all_cities[city]:
                city_names = [escape_html(group["name"]) for group in all_cities[city][net_key]]
            else:
                city_names = [escape_html(city)]

            city_display = ", ".join(city_names)

            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            date_str = end_date.strftime("%d.%m.%Y %H:%M") if isinstance(end_date, datetime) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            response += f" - –°–µ—Ç—å: {network}, –ì–æ—Ä–æ–¥: {city_display}, –°—Ä–æ–∫: {date_str}\n"

    bot.send_message(message.chat.id, response, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith("change_duration_"))
def handle_duration_change(call):
    try:
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        for entry in paid_users[user_id]:
            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            if isinstance(end_date, datetime):
                entry["end_date"] = end_date + timedelta(days=days)

        save_data()
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

def clear_old_stats():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫."""
    now = datetime.now()
    for user_id, posts in user_posts.items():
        user_posts[user_id] = [post for post in posts if now - post["time"] < timedelta(days=1)]

@bot.message_handler(commands=['statistics'])
def show_statistics_for_admin(chat_id):
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    clear_old_stats()

    stats = get_admin_statistics()
    if not stats:
        bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö.")
        return

    response = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n\n"

    for user_id, user_stats in stats.items():
        try:
            user_info = bot.get_chat(user_id)
            user_name = escape_html(user_info.first_name)
            user_link = f"<a href='https://t.me/{user_info.username}'>{user_name}</a>" if user_info.username else f"<a href='tg://user?id={user_info.id}'>{user_name}</a>"
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user_link = f"ID <code>{user_id}</code>"

        response += (
            f"üë§ {user_link}\n"
            f"üì® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{user_stats['published']}</b>\n"
            f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: <b>{user_stats['remaining']}</b>\n"
        )

        if user_stats["details"]:
            response += "üßæ <b>–î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º –∏ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
            for network, cities in user_stats["details"].items():
                net_key = normalize_work_key(network)
                for city, data in cities.items():
                    expire_str = "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
                    for paid in paid_users.get(user_id, []):
                        print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è user_id={user_id}: network={paid.get('network')}, city={paid.get('city')}")
                        if normalize_network_key(paid.get("network")) == net_key and paid.get("city") == city:
                            end_date = paid.get("end_date")
                            if isinstance(end_date, str):
                                try:
                                    end_date = datetime.fromisoformat(end_date)
                                except ValueError:
                                    print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è end_date: {end_date}")
                                    end_date = None
                            if isinstance(end_date, datetime):
                                try:
                                    if end_date >= now_ekb():  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
                                        expire_str = f"‚è≥ –¥–æ {end_date.strftime('%d.%m.%Y')}"
                                        print(f"DEBUG: –ù–∞–π–¥–µ–Ω —Å—Ä–æ–∫ –¥–ª—è {network}, {city}: {expire_str}")
                                    else:
                                        print(f"DEBUG: –°—Ä–æ–∫ –∏—Å—Ç—ë–∫ –¥–ª—è {network}, {city}")
                                        expire_str = "(—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫)"
                                except TypeError as te:
                                    print(f"DEBUG: –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç: {te}")
                            break
                    else:
                        print(f"DEBUG: –ó–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –¥–ª—è {network}, {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}")

                    location_names = [loc["name"] for loc in all_cities.get(city, {}).get(net_key, [])]
                    location_str = ", ".join(location_names) if location_names else city

                    response += (
                        f"  ‚îî üß© <b>{escape_html(network)}</b>, üìç<b>{escape_html(city)}</b> ‚Üí "
                        f"{escape_html(location_str)} {expire_str}: "
                        f"<b>{data['published']} / {data['remaining']}</b>\n"
                    )

        if user_stats["links"]:
            unique_links = list(set(user_stats["links"]))
            response += "üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n"
            for link in unique_links:
                response += f"  ‚Ä¢ <a href='{link}'>{link}</a>\n"

        response += "\n"

    try:
        bot.send_message(chat_id, response, parse_mode="HTML")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: <code>{escape_html(str(e))}</code>", parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
def select_user_for_duration_change(message):
    try:
        user_id = int(message.text)
        if user_id not in paid_users:
            bot.send_message(message.chat.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("+1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_1"))
        markup.add(types.InlineKeyboardButton("+1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_7"))
        markup.add(types.InlineKeyboardButton("+1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_30"))
        markup.add(types.InlineKeyboardButton("-1 –¥–µ–Ω—å", callback_data=f"change_duration_{user_id}_-1"))
        markup.add(types.InlineKeyboardButton("-1 –Ω–µ–¥–µ–ª—è", callback_data=f"change_duration_{user_id}_-7"))
        markup.add(types.InlineKeyboardButton("-1 –º–µ—Å—è—Ü", callback_data=f"change_duration_{user_id}_-30"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, " –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_duration_"))
def handle_duration_change(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = call.data.split("_")
        user_id = int(data[2])
        days = int(data[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
        if user_id not in paid_users:
            bot.answer_callback_query(call.id, " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for entry in paid_users[user_id]:
            end_date = entry.get("end_date")
            if isinstance(end_date, str):
                try:
                    end_date = datetime.fromisoformat(end_date)
                except:
                    end_date = None

            if isinstance(end_date, datetime):
                entry["end_date"] = end_date + timedelta(days=days)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.answer_callback_query(call.id, f"‚úÖ –°—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        show_paid_users(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_duration_change: {e}")
        bot.answer_callback_query(call.id, " –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.")

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def create_new_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_text)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_delete_post(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for post in user_posts[message.chat.id]:
            time_formatted = format_time(post["time"])
            button_text = f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}"
            markup.add(button_text)
        markup.add("–û—Ç–º–µ–Ω–∞")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
def handle_delete_all_posts(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –õ–° –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return
    if message.chat.id in user_posts and user_posts[message.chat.id]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_all_choice)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

def process_delete_choice(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    else:
        try:
            for post in user_posts[message.chat.id]:
                time_formatted = format_time(post["time"])
                if message.text == f"–£–¥–∞–ª–∏—Ç—å: {time_formatted}, {post['city']}, {post['network']}":
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
                    try:
                        bot.delete_message(post["chat_id"], post["message_id"])
                    except Exception:
                        pass

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                    add_post_to_history(
                        user_id=message.chat.id,
                        user_name=get_user_name(message.from_user),
                        network=post["network"],
                        city=post["city"],
                        chat_id=post["chat_id"],
                        message_id=post["message_id"],
                        deleted=True,
                        deleted_by="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –ò–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω
                    )

                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                    user_posts[message.chat.id].remove(post)
                    bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_keyboard())
                    return
            bot.send_message(message.chat.id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except (ValueError, IndexError):
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

def process_delete_all_choice(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        for post in user_posts[message.chat.id]:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
            try:
                bot.delete_message(post["chat_id"], post["message_id"])
            except Exception:
                pass

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_post_to_history(
                user_id=message.chat.id,
                user_name=get_user_name(message.from_user),
                network=post["network"],
                city=post["city"],
                chat_id=post["chat_id"],
                message_id=post["message_id"],
                deleted=True,
                deleted_by="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –ò–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω
            )

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        user_posts[message.chat.id] = []
        bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

def process_text(message):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return

    if message.photo or message.video:
        if message.photo:
            media_type = "photo"
            file_id = message.photo[-1].file_id
            text = message.caption if message.caption else ""
        elif message.video:
            media_type = "video"
            file_id = message.video.file_id
            text = message.caption if message.caption else ""
    elif message.text:
        media_type = None
        file_id = None
        text = message.text
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        bot.register_next_step_handler(message, process_text)
        return

    confirm_text(message, text, media_type, file_id)

def confirm_text(message, text, media_type=None, file_id=None):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def handle_confirmation(message, text, media_type, file_id):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, handle_confirmation, text, media_type, file_id)

def get_network_markup():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏", "–ù–∞–∑–∞–¥")
    return markup

def normalize_network_key(name):
    """–ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∫ –∫–ª—é—á—É all_cities: mk, parni, ns"""
    if name == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±":
        return "mk"
    elif name == "–ü–ê–†–ù–ò 18+":
        return "parni"
    elif name in ["–ù–°", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 66", "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ 74"]:
        return "ns"
    return None

def select_network(message, text, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
        return

    selected_network = message.text.strip()
    valid_networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°", "–í—Å–µ —Å–µ—Ç–∏"]

    if selected_network in valid_networks:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)

        if selected_network == "–í—Å–µ —Å–µ—Ç–∏":
            # –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º –≤ 2 —Å–µ—Ç—è—Ö
            cities = [city for city, nets in all_cities.items() if len(nets) >= 2]
        else:
            key = normalize_network_key(selected_network)
            cities = [city for city, nets in all_cities.items() if key in nets]

        for city in cities:
            markup.add(city)
        markup.add("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å", "–ù–∞–∑–∞–¥")

        bot.send_message(
            message.chat.id,
            "üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</b> –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´<i>–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å</i>¬ª:",
            reply_markup=markup,
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, select_city_and_publish, text, selected_network, media_type, file_id)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.",
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, process_text)

def select_city_and_publish(message, text, selected_network, media_type, file_id):
    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    city = message.text
    if city == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–µ—Ç—å":
        bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_network_markup())
        bot.register_next_step_handler(message, select_network, text, media_type, file_id)
        return

    user_id = message.from_user.id
    display_name = escape_html(get_user_name(message.from_user))
    text = escape_html(text)
    networks = ["–ú—É–∂—Å–∫–æ–π –ö–ª—É–±", "–ü–ê–†–ù–ò 18+", "–ù–°"] if selected_network == "–í—Å–µ —Å–µ—Ç–∏" else [selected_network]

    # –°–æ–∑–¥–∞–µ–º –∂–∏—Ä–Ω–æ–µ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è tg://user?id={user_id}
    user_name = f'<b><a href="tg://user?id={user_id}">{display_name}</a></b>'

    was_published = False

    for network in networks:
        net_key = normalize_network_key(network)
        city_data = all_cities.get(city, {}).get(net_key)

        if not city_data:
            continue

        if not is_user_paid(user_id, network, city):
            log_failed_attempt(user_id, network, city, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            continue

        user_stats = get_user_statistics(user_id)
        city_stats = user_stats.get("details", {}).get(network, {}).get(city, {})
        if city_stats.get("remaining", 0) <= 0:
            bot.send_message(message.chat.id, f"‚õî –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è <b>{escape_html(network)}</b>, –≥–æ—Ä–æ–¥ <b>{escape_html(city)}</b>", parse_mode="HTML")
            log_failed_attempt(user_id, network, city, "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω")
            continue

        signature = escape_html(network_signatures.get(network, ""))
        full_text = f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name}:\n\n{text}\n\n{signature}"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å" –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∏–º—è —É–∂–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ
        reply_markup = None

        for location in city_data:
            chat_id = location["chat_id"]
            try:
                if media_type == "photo":
                    sent_message = bot.send_photo(chat_id, file_id, caption=full_text, parse_mode="HTML", reply_markup=reply_markup)
                elif media_type == "video":
                    sent_message = bot.send_video(chat_id, file_id, caption=full_text, parse_mode="HTML", reply_markup=reply_markup)
                else:
                    sent_message = bot.send_message(chat_id, full_text, parse_mode="HTML", reply_markup=reply_markup)

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ user_posts
                if user_id not in user_posts:
                    user_posts[user_id] = []

                user_posts[user_id].append({
                    "message_id": sent_message.message_id,
                    "chat_id": chat_id,
                    "time": now_ekb(),
                    "city": location["name"],
                    "network": network,
                    "user_name": display_name
                })

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ post_history
                add_post_to_history(
                    user_id=user_id,
                    user_name=display_name,
                    network=network,
                    city=location["name"],
                    chat_id=chat_id,
                    message_id=sent_message.message_id
                )

                # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
                if user_id not in user_daily_posts:
                    user_daily_posts[user_id] = {}
                if network not in user_daily_posts[user_id]:
                    user_daily_posts[user_id][network] = {}
                if city not in user_daily_posts[user_id][network]:
                    user_daily_posts[user_id][network][city] = {"posts": [], "deleted_posts": []}

                user_daily_posts[user_id][network][city]["posts"].append(now_ekb())

                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Å–µ—Ç–∏ <b>{escape_html(network)}</b>, –≥–æ—Ä–æ–¥–µ <b>{escape_html(location['name'])}</b>.",
                    parse_mode="HTML"
                )
                was_published = True

            except telebot.apihelper.ApiTelegramException as e:
                log_failed_attempt(user_id, network, city, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e.description}")
                bot.send_message(message.chat.id, f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {escape_html(e.description)}", parse_mode="HTML")

    if not was_published:
        markup = types.InlineKeyboardMarkup()
        url = "https://t.me/FAQMKBOT" if selected_network == "–ú—É–∂—Å–∫–æ–π –ö–ª—É–±" else "https://t.me/FAQZNAKBOT"
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", url=url))
        bot.send_message(
            message.chat.id,
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–π —Å–µ—Ç–∏/–≥–æ—Ä–æ–¥–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=markup
        )

    save_data()
    ask_for_new_post(message)

def ask_for_new_post(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_new_post_choice)

def handle_new_post_choice(message):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_text)
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üôå\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats_button(message):
    try:
        user_id = message.from_user.id
        stats = get_user_statistics(user_id)

        response = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"üì® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{stats['published']}</b>\n"
            f"üìâ –û—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: <b>{stats['remaining']}</b>\n"
        )

        if stats["details"]:
            response += "\nüóÇÔ∏è <b>–î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ç—è–º –∏ –≥–æ—Ä–æ–¥–∞–º:</b>\n"
            for network, cities in stats["details"].items():
                net_key = normalize_network_key(network)
                for city, data in cities.items():
                    expire_str = "‚è≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    for paid in paid_users.get(user_id, []):
                        if normalize_network_key(paid["network"]) == net_key and paid["city"] == city:
                            end = paid.get("end_date")
                            if isinstance(end, str):
                                try:
                                    end = datetime.fromisoformat(end)
                                except:
                                    end = None
                            if isinstance(end, datetime):
                                expire_str = f"‚è≥ –¥–æ {end.strftime('%d.%m.%Y')}"
                            break

                    location_names = [loc["name"] for loc in all_cities.get(city, {}).get(net_key, [])]
                    location_str = ", ".join(location_names) if location_names else city

                    response += (
                        f"  ‚îî üß© <b>{network}</b>, üìç<b>{city}</b> ‚Üí {location_str} {expire_str}:\n"
                        f"     ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{data['published']}</b>, –û—Å—Ç–∞–ª–æ—Å—å: <b>{data['remaining']}</b>\n"
                    )

        bot.send_message(message.chat.id, response, parse_mode="HTML")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def delete_user_posts_step(message):
    try:
        user_id = int(message.text)

        if user_id not in user_posts or not user_posts[user_id]:
            bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        preview = f"üìã –ù–∞–π–¥–µ–Ω–æ <b>{len(user_posts[user_id])}</b> –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <code>{user_id}</code>:\n\n"
        for post in user_posts[user_id]:
            date_str = format_time(post["time"])
            preview += f"‚Ä¢ üß© <b>{post['network']}</b> | üìç<b>{post['city']}</b> | üïí {date_str}\n"

        # –ö–Ω–æ–ø–∫–∏: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / –æ—Ç–º–µ–Ω–∏—Ç—å
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"confirm_delete_{user_id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))

        bot.send_message(message.chat.id, preview, reply_markup=markup, parse_mode="HTML")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_") or call.data == "cancel_delete")
def handle_delete_confirmation(call):
    if call.data == "cancel_delete":
        bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        return

    user_id = int(call.data.split("_")[-1])
    deleted = 0

    if user_id in user_posts:
        for post in user_posts[user_id]:
            try:
                bot.delete_message(post["chat_id"], post["message_id"])
                deleted += 1
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            post["deleted"] = True  # ‚úÖ –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π

        save_data()

    bot.edit_message_text(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: <code>{user_id}</code>.",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML"
    )

@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return '‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!'

if __name__ == '__main__':
    init_db()
    paid_users, admins, user_posts = load_data()

    print(f"[üìÇ LOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(paid_users)} –æ–ø–ª–∞—Ç, {len(user_posts)} –ø–æ—Å—Ç–æ–≤, {len(admins)} –∞–¥–º–∏–Ω–æ–≤")

    # üîÅ –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    for core_admin in CORE_ADMINS:
        if core_admin not in admins:
            admins.append(core_admin)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ
    if paid_users or user_posts:
        save_data()
    else:
        print("[‚ö†Ô∏è INIT] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º save_data(): –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

    schedule_auto_backup()

    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)